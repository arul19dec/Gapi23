<?xml version="1.0" encoding="UTF-8"?>
<testng-results retried="18" ignored="147" total="667" passed="486" failed="16" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-03-30T16:01:08 UTC" name="gapi" finished-at="2023-03-30T16:28:16 UTC" duration-ms="1627722">
    <groups>
    </groups>
    <test started-at="2023-03-30T16:01:08 UTC" name="functional test" finished-at="2023-03-30T16:28:16 UTC" duration-ms="1627722">
      <class name="com.gapi.testCases.CreatePermanentBadgeRequest">
        <test-method signature="verifyCreatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6986852]" started-at="2023-03-30T16:21:33 UTC" name="verifyCreatePermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-03-30T16:21:37 UTC" duration-ms="3361" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create permanent badge access request with all mandatory parameters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePermanentBadgeRequest, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6986852]" started-at="2023-03-30T16:21:37 UTC" name="teardown" finished-at="2023-03-30T16:21:37 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePermanentBadgeRequest status=SUCCESS method=CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6986852] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreatePermanentBadgeRequestForInvalidLegalentity(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6986852]" started-at="2023-03-30T16:21:37 UTC" name="verifyCreatePermanentBadgeRequestForInvalidLegalentity" data-provider="testCasesData" finished-at="2023-03-30T16:21:37 UTC" duration-ms="468" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create permanent badge access request with  Invalid Legal Entity, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePermanentBadgeRequestForInvalidLegalentity, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePermanentBadgeRequestForInvalidLegalentity -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6986852]" started-at="2023-03-30T16:21:37 UTC" name="teardown" finished-at="2023-03-30T16:21:37 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePermanentBadgeRequestForInvalidLegalentity status=SUCCESS method=CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequestForInvalidLegalentity(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6986852] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreatePermanentBadgeRequestForInvalidToken(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6986852]" started-at="2023-03-30T16:21:37 UTC" name="verifyCreatePermanentBadgeRequestForInvalidToken" data-provider="testCasesData" finished-at="2023-03-30T16:21:37 UTC" duration-ms="200" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create permanent badge access request with Invalid Token, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePermanentBadgeRequestForInvalidToken, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePermanentBadgeRequestForInvalidToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6986852]" started-at="2023-03-30T16:21:37 UTC" name="teardown" finished-at="2023-03-30T16:21:37 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePermanentBadgeRequestForInvalidToken status=SUCCESS method=CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequestForInvalidToken(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6986852] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyUploadAttachmentToPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6986852]" started-at="2023-03-30T16:21:37 UTC" name="verifyUploadAttachmentToPermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-03-30T16:21:43 UTC" duration-ms="5783" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=true, contactType=, TestCaseName=Create Permanent Badge request and upload attachment, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyUploadAttachmentToPermanentBadgeRequest, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUploadAttachmentToPermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6986852]" started-at="2023-03-30T16:21:43 UTC" name="teardown" finished-at="2023-03-30T16:21:43 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyUploadAttachmentToPermanentBadgeRequest status=SUCCESS method=CreatePermanentBadgeRequest.verifyUploadAttachmentToPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6986852] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreatePermanentBadgeRequest -->
      <class name="com.gapi.testCases.CreateFAOSPRequest">
        <test-method signature="verifyCreateOSPAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@1bab8268]" started-at="2023-03-30T16:21:43 UTC" name="verifyCreateOSPAccessRequest" data-provider="testCasesData" finished-at="2023-03-30T16:21:46 UTC" duration-ms="3171" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=service, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=Visitor, TestCaseName=Create OSP access request with all mandatory parameters, search_query=, serviceImpactedDescription=not yet, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=919876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=service, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=any thing, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreateOSPAccessRequest, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateOSPAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@1bab8268]" started-at="2023-03-30T16:21:46 UTC" name="teardown" finished-at="2023-03-30T16:21:46 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateOSPAccessRequest status=SUCCESS method=CreateFAOSPRequest.verifyCreateOSPAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@1bab8268] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateOSPAccessRequestForInvalidLegalentity(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@1bab8268]" started-at="2023-03-30T16:21:46 UTC" name="verifyCreateOSPAccessRequestForInvalidLegalentity" data-provider="testCasesData" finished-at="2023-03-30T16:21:47 UTC" duration-ms="468" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=service, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create OSP access request for Invalid Legal  Entity , search_query=, serviceImpactedDescription=not yet, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=service, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=any thing, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreateOSPAccessRequestForInvalidLegalentity, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateOSPAccessRequestForInvalidLegalentity -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@1bab8268]" started-at="2023-03-30T16:21:47 UTC" name="teardown" finished-at="2023-03-30T16:21:47 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateOSPAccessRequestForInvalidLegalentity status=SUCCESS method=CreateFAOSPRequest.verifyCreateOSPAccessRequestForInvalidLegalentity(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@1bab8268] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateOSPAccessRequestForInvalidToken(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@1bab8268]" started-at="2023-03-30T16:21:47 UTC" name="verifyCreateOSPAccessRequestForInvalidToken" data-provider="testCasesData" finished-at="2023-03-30T16:21:47 UTC" duration-ms="257" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=service, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create OSP access request with Invalid Token, search_query=, serviceImpactedDescription=not yet, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=service, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=any thing, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreateOSPAccessRequestForInvalidToken, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateOSPAccessRequestForInvalidToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@1bab8268]" started-at="2023-03-30T16:21:47 UTC" name="teardown" finished-at="2023-03-30T16:21:47 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateOSPAccessRequestForInvalidToken status=SUCCESS method=CreateFAOSPRequest.verifyCreateOSPAccessRequestForInvalidToken(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@1bab8268] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyRetrievalOfOSPAccessRequestUsingID(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@1bab8268]" started-at="2023-03-30T16:21:47 UTC" name="verifyRetrievalOfOSPAccessRequestUsingID" data-provider="testCasesData" finished-at="2023-03-30T16:21:51 UTC" duration-ms="4047" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=service, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Retrieval of OSP access ticket details using ID, search_query=, serviceImpactedDescription=not yet, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=service, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=any thing, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyRetrievalOfOSPAccessRequestUsingID, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRetrievalOfOSPAccessRequestUsingID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@1bab8268]" started-at="2023-03-30T16:21:51 UTC" name="teardown" finished-at="2023-03-30T16:21:51 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyRetrievalOfOSPAccessRequestUsingID status=SUCCESS method=CreateFAOSPRequest.verifyRetrievalOfOSPAccessRequestUsingID(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@1bab8268] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyUploadAttachmentToOSPAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@1bab8268]" started-at="2023-03-30T16:21:51 UTC" name="verifyUploadAttachmentToOSPAccessRequest" data-provider="testCasesData" finished-at="2023-03-30T16:21:57 UTC" duration-ms="5735" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=service, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create OSP request and upload attachment, search_query=, serviceImpactedDescription=not yet, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=service, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=any thing, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyUploadAttachmentToOSPAccessRequest, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUploadAttachmentToOSPAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@1bab8268]" started-at="2023-03-30T16:21:57 UTC" name="teardown" finished-at="2023-03-30T16:21:57 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyUploadAttachmentToOSPAccessRequest status=SUCCESS method=CreateFAOSPRequest.verifyUploadAttachmentToOSPAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@1bab8268] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreateFAOSPRequest -->
      <class name="com.gapi.testCases.GetCrossConnectDetails">
        <test-method retried="true" signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:25:48 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:25:52 UTC" duration-ms="3137" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve the Cross Connect Details By Valid Billing Account Number, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:113)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:25:52 UTC" name="teardown" finished-at="2023-03-30T16:25:52 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SKIP method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:25:52 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:25:55 UTC" duration-ms="3223" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve the Cross Connect Details By Valid Billing Account Number, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:113)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:25:55 UTC" name="teardown" finished-at="2023-03-30T16:25:55 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=FAILURE method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:25:55 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:25:59 UTC" duration-ms="4008" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Cross Connet Requests by Iinterconnection Panel, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&interconnectionPanel=002.06.06.RU16, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:113)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:25:59 UTC" name="teardown" finished-at="2023-03-30T16:25:59 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SKIP method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:25:59 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:02 UTC" duration-ms="2742" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Cross Connet Requests by Iinterconnection Panel, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&interconnectionPanel=002.06.06.RU16, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:113)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:02 UTC" name="teardown" finished-at="2023-03-30T16:26:02 UTC" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=FAILURE method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:02 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:04 UTC" duration-ms="2617" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Cross Connect Requests by Interconnection Port Status  -Available, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&interconnectionPortStatus=Available, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:113)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:04 UTC" name="teardown" finished-at="2023-03-30T16:26:04 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SKIP method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:04 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:07 UTC" duration-ms="3253" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Cross Connect Requests by Interconnection Port Status  -Available, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&interconnectionPortStatus=Available, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:113)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:07 UTC" name="teardown" finished-at="2023-03-30T16:26:07 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=FAILURE method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:07 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:10 UTC" duration-ms="2902" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Cross Connet Requests by Interconnection PortStatus -In-Service, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&interconnectionPortStatus=In-Service, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:113)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:10 UTC" name="teardown" finished-at="2023-03-30T16:26:10 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SKIP method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:10 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:15 UTC" duration-ms="4738" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Cross Connet Requests by Interconnection PortStatus -In-Service, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&interconnectionPortStatus=In-Service, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:113)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:15 UTC" name="teardown" finished-at="2023-03-30T16:26:15 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=FAILURE method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:15 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:18 UTC" duration-ms="2937" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Cross Connect Requests by Interconnection Port Status  -Pre-Wired, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&interconnectionPortStatus=Pre-Wired, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:113)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:18 UTC" name="teardown" finished-at="2023-03-30T16:26:18 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SKIP method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:18 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:21 UTC" duration-ms="2625" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Cross Connect Requests by Interconnection Port Status  -Pre-Wired, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&interconnectionPortStatus=Pre-Wired, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:113)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:21 UTC" name="teardown" finished-at="2023-03-30T16:26:21 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=FAILURE method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:21 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:24 UTC" duration-ms="2911" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Cross-Connect Request - filter - Limit(Min 25 to Max 1000), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&limit=25, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:24 UTC" name="teardown" finished-at="2023-03-30T16:26:24 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SUCCESS method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:24 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:24 UTC" duration-ms="313" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve the Cross Connect details by exceeds the Max Limit value(Max limit=1000), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&limit=3000, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:56)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:24 UTC" name="teardown" finished-at="2023-03-30T16:26:24 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SKIP method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:24 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:24 UTC" duration-ms="281" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve the Cross Connect details by exceeds the Max Limit value(Max limit=1000), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&limit=3000, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:56)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:24 UTC" name="teardown" finished-at="2023-03-30T16:26:24 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=FAILURE method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:24 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:27 UTC" duration-ms="2767" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=CC- Retrieve Cross-Connect Requests by Offset, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&offset=1, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:27 UTC" name="teardown" finished-at="2023-03-30T16:26:27 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SUCCESS method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:27 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:30 UTC" duration-ms="2809" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retreive the cross connect details by NOT providing the offset&Limit values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:113)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:30 UTC" name="teardown" finished-at="2023-03-30T16:26:30 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SKIP method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:30 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:33 UTC" duration-ms="3056" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retreive the cross connect details by NOT providing the offset&Limit values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:113)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:33 UTC" name="teardown" finished-at="2023-03-30T16:26:33 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=FAILURE method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:33 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:36 UTC" duration-ms="2681" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve the cross connect details by  providing the Limit values and Not specifying the offset value, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&limit=10, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:36 UTC" name="teardown" finished-at="2023-03-30T16:26:36 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SUCCESS method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:36 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:38 UTC" duration-ms="2735" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrive the Cross connect data by providing Same Limit & Offset values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&limit=8&offset=8, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:38 UTC" name="teardown" finished-at="2023-03-30T16:26:38 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SUCCESS method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:38 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:41 UTC" duration-ms="2738" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retreive the cross connect details by providing the offset value greater than all available records, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&offset=300, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:41 UTC" name="teardown" finished-at="2023-03-30T16:26:41 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SUCCESS method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:41 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:44 UTC" duration-ms="2892" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve the Cross Connect Details by valid Limit & Offset values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:113)
at jdk.internal.reflect.GeneratedMethodAccessor203.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:44 UTC" name="teardown" finished-at="2023-03-30T16:26:44 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SKIP method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:44 UTC" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:26:46 UTC" duration-ms="2594" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve the Cross Connect Details by valid Limit & Offset values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:113)
at jdk.internal.reflect.GeneratedMethodAccessor203.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:46 UTC" name="teardown" finished-at="2023-03-30T16:26:46 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=FAILURE method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsByInValidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:46 UTC" name="verifyGetCrossConnectDetailsByInValidId" data-provider="testCasesData" finished-at="2023-03-30T16:26:49 UTC" duration-ms="2555" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Cross Connect Inventory by Invalid ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Internal Server Error, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=500, ci=, readFlag=, errorMessage=Oops. Something went wrong. The server encountered an internal error or misconfiguration and was unable to complete your request., methodName=verifyGetCrossConnectDetailsByInValidId, errorMessageType=server, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByInValidId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:49 UTC" name="teardown" finished-at="2023-03-30T16:26:49 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByInValidId status=SUCCESS method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByInValidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsByInvalidBearerToken(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:49 UTC" name="verifyGetCrossConnectDetailsByInvalidBearerToken" data-provider="testCasesData" finished-at="2023-03-30T16:26:49 UTC" duration-ms="204" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve the Cross connect details by Invalid Bearer Token, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsByInvalidBearerToken, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByInvalidBearerToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:49 UTC" name="teardown" finished-at="2023-03-30T16:26:49 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByInvalidBearerToken status=SUCCESS method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidBearerToken(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsByInvalidBillingAccountNumber(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:49 UTC" name="verifyGetCrossConnectDetailsByInvalidBillingAccountNumber" data-provider="testCasesData" finished-at="2023-03-30T16:26:52 UTC" duration-ms="2453" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Cross Connect Requests by Invalid Blling Accounnt Number, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsByInvalidBillingAccountNumber, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=1234, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByInvalidBillingAccountNumber -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:52 UTC" name="teardown" finished-at="2023-03-30T16:26:52 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByInvalidBillingAccountNumber status=SUCCESS method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidBillingAccountNumber(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsByInvalidInterconnectionPortStatus(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:52 UTC" name="verifyGetCrossConnectDetailsByInvalidInterconnectionPortStatus" data-provider="testCasesData" finished-at="2023-03-30T16:26:52 UTC" duration-ms="269" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Cross Connet Requests by In-valid  Interconnection PortStatus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsByInvalidInterconnectionPortStatus, errorMessageType=, standardVisitorBadgeStr=, filters=interconnectionPortStatus=abc&accountId=0012E00002dzuIMQAY, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByInvalidInterconnectionPortStatus -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:52 UTC" name="teardown" finished-at="2023-03-30T16:26:52 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByInvalidInterconnectionPortStatus status=SUCCESS method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidInterconnectionPortStatus(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetCrossConnectDetailsByInvalidLimitValue(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:52 UTC" name="verifyGetCrossConnectDetailsByInvalidLimitValue" data-provider="testCasesData" finished-at="2023-03-30T16:26:55 UTC" duration-ms="2735" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve the Cross connect details by Invalid Limit value(limit=0), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsByInvalidLimitValue, errorMessageType=, standardVisitorBadgeStr=, filters=limit=0&accountId=0012E00002dzuIMQAY, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidLimitValue(GetCrossConnectDetails.java:306)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByInvalidLimitValue -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:55 UTC" name="teardown" finished-at="2023-03-30T16:26:55 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByInvalidLimitValue status=SKIP method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidLimitValue(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsByInvalidLimitValue(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:55 UTC" name="verifyGetCrossConnectDetailsByInvalidLimitValue" data-provider="testCasesData" finished-at="2023-03-30T16:26:57 UTC" duration-ms="2636" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve the Cross connect details by Invalid Limit value(limit=0), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsByInvalidLimitValue, errorMessageType=, standardVisitorBadgeStr=, filters=limit=0&accountId=0012E00002dzuIMQAY, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidLimitValue(GetCrossConnectDetails.java:306)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByInvalidLimitValue -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:57 UTC" name="teardown" finished-at="2023-03-30T16:26:57 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByInvalidLimitValue status=FAILURE method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidLimitValue(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsByValidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:57 UTC" name="verifyGetCrossConnectDetailsByValidId" data-provider="testCasesData" finished-at="2023-03-30T16:26:59 UTC" duration-ms="1448" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Cross Connect Inventory Details by ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsByValidId, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByValidId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:59 UTC" name="teardown" finished-at="2023-03-30T16:26:59 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByValidId status=SUCCESS method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByValidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsByValidInterconnectionPortStatusAndInvalidInterConnectPanel(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:26:59 UTC" name="verifyGetCrossConnectDetailsByValidInterconnectionPortStatusAndInvalidInterConnectPanel" data-provider="testCasesData" finished-at="2023-03-30T16:27:01 UTC" duration-ms="2459" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve the Cross Connect Details by valid Inter connection Port Status & Invalid inter connect Panel, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsByValidInterconnectionPortStatusAndInvalidInterConnectPanel, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&interconnectionPanel=002.04.10&interconnectionPortStatus=In-Service, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByValidInterconnectionPortStatusAndInvalidInterConnectPanel -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:01 UTC" name="teardown" finished-at="2023-03-30T16:27:01 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByValidInterconnectionPortStatusAndInvalidInterConnectPanel status=SUCCESS method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByValidInterconnectionPortStatusAndInvalidInterConnectPanel(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetCrossConnectDetailsWithNegativeLimitValues(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:01 UTC" name="verifyGetCrossConnectDetailsWithNegativeLimitValues" data-provider="testCasesData" finished-at="2023-03-30T16:27:02 UTC" duration-ms="273" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retreive the cross connect details by  providing the NEGATIVE Limit values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsWithNegativeLimitValues, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&limit=-1000, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Query parameter 'limit' has to be formatted as 'integer'.] but found [Query parameter 'limit' must be a integer and value has to be between '1' and '1000'.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Query parameter 'limit' has to be formatted as 'integer'.] but found [Query parameter 'limit' must be a integer and value has to be between '1' and '1000'.]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.utilities.TestUtilities.verifyErrorResponseMessage(TestUtilities.java:556)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNegativeLimitValues(GetCrossConnectDetails.java:388)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsWithNegativeLimitValues -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:02 UTC" name="teardown" finished-at="2023-03-30T16:27:02 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsWithNegativeLimitValues status=SKIP method=GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNegativeLimitValues(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsWithNegativeLimitValues(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:02 UTC" name="verifyGetCrossConnectDetailsWithNegativeLimitValues" data-provider="testCasesData" finished-at="2023-03-30T16:27:02 UTC" duration-ms="279" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retreive the cross connect details by  providing the NEGATIVE Limit values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsWithNegativeLimitValues, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&limit=-1000, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Query parameter 'limit' has to be formatted as 'integer'.] but found [Query parameter 'limit' must be a integer and value has to be between '1' and '1000'.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Query parameter 'limit' has to be formatted as 'integer'.] but found [Query parameter 'limit' must be a integer and value has to be between '1' and '1000'.]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.utilities.TestUtilities.verifyErrorResponseMessage(TestUtilities.java:556)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNegativeLimitValues(GetCrossConnectDetails.java:388)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsWithNegativeLimitValues -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:02 UTC" name="teardown" finished-at="2023-03-30T16:27:02 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsWithNegativeLimitValues status=FAILURE method=GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNegativeLimitValues(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetCrossConnectDetailsWithNegativeOffset(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:02 UTC" name="verifyGetCrossConnectDetailsWithNegativeOffset" data-provider="testCasesData" finished-at="2023-03-30T16:27:02 UTC" duration-ms="277" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retreive the cross connect details by  providing the NEGATIVE Offset values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsWithNegativeOffset, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&offset=-1000, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Query parameter 'offset' can't be a negative number.] but found [Query parameter 'offset' must be a integer and value has to be between '0' and '1000'.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Query parameter 'offset' can't be a negative number.] but found [Query parameter 'offset' must be a integer and value has to be between '0' and '1000'.]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.utilities.TestUtilities.verifyErrorResponseMessage(TestUtilities.java:556)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNegativeOffset(GetCrossConnectDetails.java:328)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsWithNegativeOffset -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:02 UTC" name="teardown" finished-at="2023-03-30T16:27:02 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsWithNegativeOffset status=SKIP method=GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNegativeOffset(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsWithNegativeOffset(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:02 UTC" name="verifyGetCrossConnectDetailsWithNegativeOffset" data-provider="testCasesData" finished-at="2023-03-30T16:27:02 UTC" duration-ms="277" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retreive the cross connect details by  providing the NEGATIVE Offset values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsWithNegativeOffset, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&offset=-1000, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Query parameter 'offset' can't be a negative number.] but found [Query parameter 'offset' must be a integer and value has to be between '0' and '1000'.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Query parameter 'offset' can't be a negative number.] but found [Query parameter 'offset' must be a integer and value has to be between '0' and '1000'.]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.utilities.TestUtilities.verifyErrorResponseMessage(TestUtilities.java:556)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNegativeOffset(GetCrossConnectDetails.java:328)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsWithNegativeOffset -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:02 UTC" name="teardown" finished-at="2023-03-30T16:27:02 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsWithNegativeOffset status=FAILURE method=GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNegativeOffset(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetCrossConnectDetailsWithNonIntegerLimitValues(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:02 UTC" name="verifyGetCrossConnectDetailsWithNonIntegerLimitValues" data-provider="testCasesData" finished-at="2023-03-30T16:27:03 UTC" duration-ms="282" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retreive the cross connect details by  providing the Non-Interger Limit values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsWithNonIntegerLimitValues, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&limit=abc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Query parameter 'limit' has to be formatted as 'integer'.] but found [Bad request was submitted.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Query parameter 'limit' has to be formatted as 'integer'.] but found [Bad request was submitted.]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.utilities.TestUtilities.verifyErrorResponseMessage(TestUtilities.java:556)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNonIntegerLimitValues(GetCrossConnectDetails.java:368)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsWithNonIntegerLimitValues -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:03 UTC" name="teardown" finished-at="2023-03-30T16:27:03 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsWithNonIntegerLimitValues status=SKIP method=GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNonIntegerLimitValues(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsWithNonIntegerLimitValues(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:03 UTC" name="verifyGetCrossConnectDetailsWithNonIntegerLimitValues" data-provider="testCasesData" finished-at="2023-03-30T16:27:03 UTC" duration-ms="318" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retreive the cross connect details by  providing the Non-Interger Limit values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsWithNonIntegerLimitValues, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&limit=abc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Query parameter 'limit' has to be formatted as 'integer'.] but found [Bad request was submitted.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Query parameter 'limit' has to be formatted as 'integer'.] but found [Bad request was submitted.]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.utilities.TestUtilities.verifyErrorResponseMessage(TestUtilities.java:556)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNonIntegerLimitValues(GetCrossConnectDetails.java:368)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsWithNonIntegerLimitValues -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:03 UTC" name="teardown" finished-at="2023-03-30T16:27:03 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsWithNonIntegerLimitValues status=FAILURE method=GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNonIntegerLimitValues(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetCrossConnectDetailsWithNonIntergerOffset(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:03 UTC" name="verifyGetCrossConnectDetailsWithNonIntergerOffset" data-provider="testCasesData" finished-at="2023-03-30T16:27:03 UTC" duration-ms="288" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retreive the cross connect details by  providing the Non-Interger Offset values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsWithNonIntergerOffset, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&offset=abc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Query parameter 'offset' has to be formatted as 'integer'.] but found [Bad request was submitted.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Query parameter 'offset' has to be formatted as 'integer'.] but found [Bad request was submitted.]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.utilities.TestUtilities.verifyErrorResponseMessage(TestUtilities.java:556)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNonIntergerOffset(GetCrossConnectDetails.java:348)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsWithNonIntergerOffset -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:03 UTC" name="teardown" finished-at="2023-03-30T16:27:03 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsWithNonIntergerOffset status=SKIP method=GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNonIntergerOffset(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsWithNonIntergerOffset(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:03 UTC" name="verifyGetCrossConnectDetailsWithNonIntergerOffset" data-provider="testCasesData" finished-at="2023-03-30T16:27:04 UTC" duration-ms="287" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retreive the cross connect details by  providing the Non-Interger Offset values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsWithNonIntergerOffset, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dzuIMQAY&offset=abc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Query parameter 'offset' has to be formatted as 'integer'.] but found [Bad request was submitted.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Query parameter 'offset' has to be formatted as 'integer'.] but found [Bad request was submitted.]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.utilities.TestUtilities.verifyErrorResponseMessage(TestUtilities.java:556)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNonIntergerOffset(GetCrossConnectDetails.java:348)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsWithNonIntergerOffset -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:04 UTC" name="teardown" finished-at="2023-03-30T16:27:04 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsWithNonIntergerOffset status=FAILURE method=GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNonIntergerOffset(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsusingIDByInvalidBearerToken(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:04 UTC" name="verifyGetCrossConnectDetailsusingIDByInvalidBearerToken" data-provider="testCasesData" finished-at="2023-03-30T16:27:04 UTC" duration-ms="200" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Cross Connect Inventory details by Invalid ID using In-Valid Bearer Token, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Unauthorized, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=401, ci=, readFlag=, errorMessage=Unauthorized. Access token is missing or invalid., methodName=verifyGetCrossConnectDetailsusingIDByInvalidBearerToken, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsusingIDByInvalidBearerToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27]" started-at="2023-03-30T16:27:04 UTC" name="teardown" finished-at="2023-03-30T16:27:04 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsusingIDByInvalidBearerToken status=SUCCESS method=GetCrossConnectDetails.verifyGetCrossConnectDetailsusingIDByInvalidBearerToken(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@6d7fc27] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetCrossConnectDetails -->
      <class name="com.gapi.testCases.CreateAllFourInOne">
        <test-method signature="CreatePermissionGroup(java.util.Map)[pri:1, instance:com.gapi.testCases.CreateAllFourInOne@14fa86ae]" started-at="2023-03-30T16:28:11 UTC" name="CreatePermissionGroup" data-provider="testCasesData" finished-at="2023-03-30T16:28:13 UTC" duration-ms="2000" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate if we are able to create Permission Group, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=automationPermissionGroupName, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=CreatePermissionGroup, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreatePermissionGroup -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateAllFourInOne@14fa86ae]" started-at="2023-03-30T16:28:13 UTC" name="teardown" finished-at="2023-03-30T16:28:13 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreatePermissionGroup status=SUCCESS method=CreateAllFourInOne.CreatePermissionGroup(java.util.Map)[pri:1, instance:com.gapi.testCases.CreateAllFourInOne@14fa86ae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="CreatePermissions(java.util.Map)[pri:2, instance:com.gapi.testCases.CreateAllFourInOne@14fa86ae]" started-at="2023-03-30T16:28:13 UTC" name="CreatePermissions" data-provider="testCasesData" finished-at="2023-03-30T16:28:15 UTC" duration-ms="1956" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate if we are able to create Permissions, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=automationPermissionAction, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=dummyPG, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=automationPermissionName, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=CreatePermissions, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreatePermissions -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateAllFourInOne@14fa86ae]" started-at="2023-03-30T16:28:15 UTC" name="teardown" finished-at="2023-03-30T16:28:15 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreatePermissions status=SUCCESS method=CreateAllFourInOne.CreatePermissions(java.util.Map)[pri:2, instance:com.gapi.testCases.CreateAllFourInOne@14fa86ae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="CreateRoles(java.util.Map)[pri:3, instance:com.gapi.testCases.CreateAllFourInOne@14fa86ae]" started-at="2023-03-30T16:28:15 UTC" name="CreateRoles" data-provider="testCasesData" finished-at="2023-03-30T16:28:15 UTC" duration-ms="483" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=automationPermissionForRoles, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate if we are able to create Roles, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=automationRoleName, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=10000, lastName=, code=C, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=automationPermissionGroupForRoles, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=CreateRoles, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=automationPermissionGroupForRoles, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateRoles -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateAllFourInOne@14fa86ae]" started-at="2023-03-30T16:28:15 UTC" name="teardown" finished-at="2023-03-30T16:28:15 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateRoles status=SUCCESS method=CreateAllFourInOne.CreateRoles(java.util.Map)[pri:3, instance:com.gapi.testCases.CreateAllFourInOne@14fa86ae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreateAllFourInOne -->
      <class name="com.gapi.testCases.AddCommentToTheShipmentsTicket">
        <test-method signature="AddUsercommentsShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentToTheShipmentsTicket@68034211]" started-at="2023-03-30T16:27:10 UTC" name="AddUsercommentsShipmentsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:27:12 UTC" duration-ms="2328" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Add Comment to Existing S&R Ticket where comment size greater than 4000 charecters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DTDCTEST, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=AddUsercommentsShipmentsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddUsercommentsShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddCommentToTheShipmentsTicket@68034211]" started-at="2023-03-30T16:27:12 UTC" name="teardown" finished-at="2023-03-30T16:27:12 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddUsercommentsShipmentsTicket status=SUCCESS method=AddCommentToTheShipmentsTicket.AddUsercommentsShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentToTheShipmentsTicket@68034211] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyAddingsizeMaxSHTicketForWithmandatoryfieldsRequired(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentToTheShipmentsTicket@68034211]" started-at="2023-03-30T16:27:12 UTC" name="verifyAddingsizeMaxSHTicketForWithmandatoryfieldsRequired" data-provider="testCasesData" finished-at="2023-03-30T16:27:12 UTC" duration-ms="141" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=SR- Add Comment to Existing S&R Ticket where comment size max 4000 characters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=WO8685565, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments= RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAddingsizeMaxSHTicketForWithmandatoryfieldsRequired, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddingsizeMaxSHTicketForWithmandatoryfieldsRequired -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddCommentToTheShipmentsTicket@68034211]" started-at="2023-03-30T16:27:12 UTC" name="teardown" finished-at="2023-03-30T16:27:12 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAddingsizeMaxSHTicketForWithmandatoryfieldsRequired status=SUCCESS method=AddCommentToTheShipmentsTicket.verifyAddingsizeMaxSHTicketForWithmandatoryfieldsRequired(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentToTheShipmentsTicket@68034211] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.AddCommentToTheShipmentsTicket -->
      <class name="com.gapi.testCases.CreateNewUser">
        <test-method signature="verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@2d9caaeb]" started-at="2023-03-30T16:19:18 UTC" name="verifyCreateNewUser" data-provider="testCasesData" finished-at="2023-03-30T16:19:21 UTC" duration-ms="2223" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=verify user should be able to create a New user with mandatory parameters using post request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=testfirstName, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=testLastName, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=testEmail, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=Request is invalid., methodName=verifyCreateNewUser, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateNewUser -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateNewUser@2d9caaeb]" started-at="2023-03-30T16:19:21 UTC" name="teardown" finished-at="2023-03-30T16:19:21 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateNewUser status=SUCCESS method=CreateNewUser.verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@2d9caaeb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@2d9caaeb]" started-at="2023-03-30T16:19:21 UTC" name="verifyCreateNewUser" data-provider="testCasesData" finished-at="2023-03-30T16:19:21 UTC" duration-ms="475" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=verify user should be able to create a New user with optional parameters as Position using post request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=testfirstName, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=Director of Marketing, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=testLastName, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=testEmail, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateNewUser, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [201] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [201] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreateNewUser.verifyCreateNewUser(CreateNewUser.java:64)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateNewUser -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateNewUser@2d9caaeb]" started-at="2023-03-30T16:19:21 UTC" name="teardown" finished-at="2023-03-30T16:19:21 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateNewUser status=SKIP method=CreateNewUser.verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@2d9caaeb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@2d9caaeb]" started-at="2023-03-30T16:19:21 UTC" name="verifyCreateNewUser" data-provider="testCasesData" finished-at="2023-03-30T16:19:23 UTC" duration-ms="2003" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=verify user should be able to create a New user with optional parameters as Position using post request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=testfirstName, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=Director of Marketing, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=testLastName, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=testEmail, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateNewUser, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateNewUser -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateNewUser@2d9caaeb]" started-at="2023-03-30T16:19:23 UTC" name="teardown" finished-at="2023-03-30T16:19:23 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateNewUser status=SUCCESS method=CreateNewUser.verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@2d9caaeb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@2d9caaeb]" started-at="2023-03-30T16:19:23 UTC" name="verifyCreateNewUser" data-provider="testCasesData" finished-at="2023-03-30T16:19:24 UTC" duration-ms="464" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=verify API user should NOT be able to create a New user without mandatory parameter - first name using post request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Doe, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=jdoe@digitalrealy.com, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=MISSING_FIRST_NAME, methodName=verifyCreateNewUser, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateNewUser -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateNewUser@2d9caaeb]" started-at="2023-03-30T16:19:24 UTC" name="teardown" finished-at="2023-03-30T16:19:24 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateNewUser status=SUCCESS method=CreateNewUser.verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@2d9caaeb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@2d9caaeb]" started-at="2023-03-30T16:19:24 UTC" name="verifyCreateNewUser" data-provider="testCasesData" finished-at="2023-03-30T16:19:25 UTC" duration-ms="1848" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate if we are able to create new user using both mandatory & optional parameters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=testfirstName, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=Director of Marketing, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=testLastName, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=testEmail, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateNewUser, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateNewUser -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateNewUser@2d9caaeb]" started-at="2023-03-30T16:19:25 UTC" name="teardown" finished-at="2023-03-30T16:19:25 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateNewUser status=SUCCESS method=CreateNewUser.verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@2d9caaeb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreateNewUser -->
      <class name="com.gapi.testCases.ModifyFAPermanentBadge">
        <test-method signature="verifyModifyPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@59d4cd39]" started-at="2023-03-30T16:22:29 UTC" name="verifyModifyPermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-03-30T16:22:32 UTC" duration-ms="3059" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Modify permanent badge request with valid site and location, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyModifyPermanentBadgeRequest, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyModifyPermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@59d4cd39]" started-at="2023-03-30T16:22:32 UTC" name="teardown" finished-at="2023-03-30T16:22:32 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyModifyPermanentBadgeRequest status=SUCCESS method=ModifyFAPermanentBadge.verifyModifyPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@59d4cd39] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyModifyPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@59d4cd39]" started-at="2023-03-30T16:22:32 UTC" name="verifyModifyPermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-03-30T16:22:33 UTC" duration-ms="300" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Modify permanent badge request with Invalid site and location, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Not Found, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=404, ci=, readFlag=, errorMessage=Resource not found., methodName=verifyModifyPermanentBadgeRequest, errorMessageType=client, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=abc041, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyModifyPermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@59d4cd39]" started-at="2023-03-30T16:22:33 UTC" name="teardown" finished-at="2023-03-30T16:22:33 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyModifyPermanentBadgeRequest status=SUCCESS method=ModifyFAPermanentBadge.verifyModifyPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@59d4cd39] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.ModifyFAPermanentBadge -->
      <class name="com.gapi.testCases.GetMarkets">
        <test-method signature="getMarketsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetMarkets@4f704591]" started-at="2023-03-30T16:19:48 UTC" name="getMarketsInformation" data-provider="testCasesData" finished-at="2023-03-30T16:19:48 UTC" duration-ms="663" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName= Validate if the Response has Markets field in addition to the 200 code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getMarketsInformation, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&sitecodes=LAX010, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getMarketsInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetMarkets@4f704591]" started-at="2023-03-30T16:19:48 UTC" name="teardown" finished-at="2023-03-30T16:19:48 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getMarketsInformation status=SUCCESS method=GetMarkets.getMarketsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetMarkets@4f704591] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetMarkets -->
      <class name="com.gapi.testCases.AddCommentsToTheRemoteHandsTicket">
        <test-method signature="AddUsercommentsRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@518caac3]" started-at="2023-03-30T16:27:04 UTC" name="AddUsercommentsRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:27:06 UTC" duration-ms="2447" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Add Comment to Existing RH Tickets in Status -New  - Comment greater than Max size of 1024, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=AddUsercommentsRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddUsercommentsRemoteHandsTicket -->
        <test-method signature="AddUsercommentsRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@518caac3]" started-at="2023-03-30T16:27:06 UTC" name="AddUsercommentsRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:27:08 UTC" duration-ms="2219" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Add Comment to Existing RH Tickets in Status -New (up to max size 1024), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=AddUsercommentsRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddUsercommentsRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@518caac3]" started-at="2023-03-30T16:27:06 UTC" name="teardown" finished-at="2023-03-30T16:27:06 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddUsercommentsRemoteHandsTicket status=SUCCESS method=AddCommentsToTheRemoteHandsTicket.AddUsercommentsRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@518caac3]" started-at="2023-03-30T16:27:08 UTC" name="teardown" finished-at="2023-03-30T16:27:08 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddUsercommentsRemoteHandsTicket status=SUCCESS method=AddCommentsToTheRemoteHandsTicket.AddUsercommentsRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="AddUsercommentsRemoteHandsTicketwithoutMandatoryParameters(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@518caac3]" started-at="2023-03-30T16:27:08 UTC" name="AddUsercommentsRemoteHandsTicketwithoutMandatoryParameters" data-provider="testCasesData" finished-at="2023-03-30T16:27:10 UTC" duration-ms="1414" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Add Comment to Existing RH Tickets without using both Mandatory fields RequestID and Comment, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=gpuat22-51@yahoo.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=AddUsercommentsRemoteHandsTicketwithoutMandatoryParameters, errorMessageType=, standardVisitorBadgeStr=, filters=", visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddUsercommentsRemoteHandsTicketwithoutMandatoryParameters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@518caac3]" started-at="2023-03-30T16:27:10 UTC" name="teardown" finished-at="2023-03-30T16:27:10 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddUsercommentsRemoteHandsTicketwithoutMandatoryParameters status=SUCCESS method=AddCommentsToTheRemoteHandsTicket.AddUsercommentsRemoteHandsTicketwithoutMandatoryParameters(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.AddCommentsToTheRemoteHandsTicket -->
      <class name="com.gapi.testCases.GetPermanentBadgeDetails">
        <test-method signature="getPermanentBadgeDetailsInfoWithInvalidGlobalUltimate()[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@6e01f9b0]" started-at="2023-03-30T16:22:03 UTC" name="getPermanentBadgeDetailsInfoWithInvalidGlobalUltimate" finished-at="2023-03-30T16:22:03 UTC" duration-ms="413" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPermanentBadgeDetailsInfoWithInvalidGlobalUltimate -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@6e01f9b0]" started-at="2023-03-30T16:22:03 UTC" name="teardown" finished-at="2023-03-30T16:22:03 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPermanentBadgeDetailsInfoWithInvalidGlobalUltimate status=SUCCESS method=GetPermanentBadgeDetails.getPermanentBadgeDetailsInfoWithInvalidGlobalUltimate()[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getPermanentBadgeInfo()[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@6e01f9b0]" started-at="2023-03-30T16:22:03 UTC" name="getPermanentBadgeInfo" finished-at="2023-03-30T16:22:09 UTC" duration-ms="6139" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPermanentBadgeInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@6e01f9b0]" started-at="2023-03-30T16:22:09 UTC" name="teardown" finished-at="2023-03-30T16:22:09 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPermanentBadgeInfo status=SUCCESS method=GetPermanentBadgeDetails.getPermanentBadgeInfo()[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getPermanentBadgeInfoWithInvalidLegalentity()[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@6e01f9b0]" started-at="2023-03-30T16:22:09 UTC" name="getPermanentBadgeInfoWithInvalidLegalentity" finished-at="2023-03-30T16:22:10 UTC" duration-ms="508" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPermanentBadgeInfoWithInvalidLegalentity -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@6e01f9b0]" started-at="2023-03-30T16:22:10 UTC" name="teardown" finished-at="2023-03-30T16:22:10 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPermanentBadgeInfoWithInvalidLegalentity status=SUCCESS method=GetPermanentBadgeDetails.getPermanentBadgeInfoWithInvalidLegalentity()[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getPermanentBadgeInfoWithInvalidToken()[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@6e01f9b0]" started-at="2023-03-30T16:22:10 UTC" name="getPermanentBadgeInfoWithInvalidToken" finished-at="2023-03-30T16:22:10 UTC" duration-ms="199" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPermanentBadgeInfoWithInvalidToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@6e01f9b0]" started-at="2023-03-30T16:22:10 UTC" name="teardown" finished-at="2023-03-30T16:22:10 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPermanentBadgeInfoWithInvalidToken status=SUCCESS method=GetPermanentBadgeDetails.getPermanentBadgeInfoWithInvalidToken()[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetPermanentBadgeDetails -->
      <class name="com.gapi.testCases.GetSites">
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:17 UTC" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-03-30T16:20:18 UTC" duration-ms="1059" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Site using account id &Campus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&campus=Y, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:18 UTC" name="teardown" finished-at="2023-03-30T16:20:18 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:18 UTC" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-03-30T16:20:19 UTC" duration-ms="872" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Site using account id , City&Campus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&city=Hong Kong&campus=Y, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:19 UTC" name="teardown" finished-at="2023-03-30T16:20:19 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:19 UTC" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-03-30T16:20:19 UTC" duration-ms="675" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Site using account id , Market&City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&market=Hong Kong&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:19 UTC" name="teardown" finished-at="2023-03-30T16:20:19 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:19 UTC" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-03-30T16:20:20 UTC" duration-ms="831" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Site using account id , Market&Campus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&market=Hong Kong&campus=Y, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:20 UTC" name="teardown" finished-at="2023-03-30T16:20:20 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:20 UTC" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-03-30T16:20:21 UTC" duration-ms="1170" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Site using account id &Market, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&market=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:21 UTC" name="teardown" finished-at="2023-03-30T16:20:21 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:21 UTC" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-03-30T16:20:22 UTC" duration-ms="818" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Site using account id , Country&Campus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&country=Hong Kong&campus=Y, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:22 UTC" name="teardown" finished-at="2023-03-30T16:20:22 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:22 UTC" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-03-30T16:20:23 UTC" duration-ms="862" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Site using account id , Country&City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&country=Hong Kong&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:23 UTC" name="teardown" finished-at="2023-03-30T16:20:23 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:23 UTC" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-03-30T16:20:24 UTC" duration-ms="777" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Site using account id , Country,Market&City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&country=Hong Kong&market=Hong Kong&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:24 UTC" name="teardown" finished-at="2023-03-30T16:20:24 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:24 UTC" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-03-30T16:20:25 UTC" duration-ms="671" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Site using account id , Country&Market, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&country=Hong Kong&market=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:25 UTC" name="teardown" finished-at="2023-03-30T16:20:25 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:25 UTC" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-03-30T16:20:25 UTC" duration-ms="745" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Site using account id &Country code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&country=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:25 UTC" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-03-30T16:20:26 UTC" duration-ms="640" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Site using account id , Region,Country,Market,City &Campus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&country=Hong Kong&market=Hong Kong&city=Hong Kong&campus=Y, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:25 UTC" name="teardown" finished-at="2023-03-30T16:20:25 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:26 UTC" name="teardown" finished-at="2023-03-30T16:20:26 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:26 UTC" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-03-30T16:20:27 UTC" duration-ms="651" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Site using account id , Region,Country,Market &City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&country=Hong Kong&market=Hong Kong&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:27 UTC" name="teardown" finished-at="2023-03-30T16:20:27 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:27 UTC" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-03-30T16:20:27 UTC" duration-ms="658" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Site using account id , Region,Country &Market, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&country=Hong Kong&market=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:27 UTC" name="teardown" finished-at="2023-03-30T16:20:27 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:27 UTC" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-03-30T16:20:28 UTC" duration-ms="1167" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Site using account id , Region&Campus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&campus=Y, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:28 UTC" name="teardown" finished-at="2023-03-30T16:20:28 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:28 UTC" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-03-30T16:20:29 UTC" duration-ms="672" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Site using account id , Region&City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:29 UTC" name="teardown" finished-at="2023-03-30T16:20:29 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:29 UTC" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-03-30T16:20:30 UTC" duration-ms="684" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Site using account id , Region&City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:30 UTC" name="teardown" finished-at="2023-03-30T16:20:30 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:30 UTC" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-03-30T16:20:30 UTC" duration-ms="684" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Site using account id , Region&Market, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&market=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@704deff2]" started-at="2023-03-30T16:20:30 UTC" name="teardown" finished-at="2023-03-30T16:20:30 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@704deff2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetSites -->
      <class name="com.gapi.testCases.CreateVisitorAccessRequest">
        <test-method signature="bulkVisitorAccessRequestInfo(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:00 UTC" name="bulkVisitorAccessRequestInfo" data-provider="testCasesData" finished-at="2023-03-30T16:21:06 UTC" duration-ms="5749" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=FA-Creation of Bulk Visitor Access request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=bulkVisitorAccessRequestInfo, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=Sample12.xlsx&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkVisitorAccessRequestInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:06 UTC" name="teardown" finished-at="2023-03-30T16:21:06 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=bulkVisitorAccessRequestInfo status=SUCCESS method=CreateVisitorAccessRequest.bulkVisitorAccessRequestInfo(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getVisitorAccessRequestByID(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:06 UTC" name="getVisitorAccessRequestByID" data-provider="testCasesData" finished-at="2023-03-30T16:21:11 UTC" duration-ms="5312" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=true, isBulkRequest=false, contactType=, TestCaseName=Retrieve Visitor Access ticket details - Get By ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getVisitorAccessRequestByID, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getVisitorAccessRequestByID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:11 UTC" name="teardown" finished-at="2023-03-30T16:21:11 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getVisitorAccessRequestByID status=SUCCESS method=CreateVisitorAccessRequest.getVisitorAccessRequestByID(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:11 UTC" name="verifyCreateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-03-30T16:21:15 UTC" duration-ms="3664" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=true, isBulkRequest=false, contactType=, TestCaseName=Create visitor access request with all mandatory parameters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreateVisitorAccessRequest, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:15 UTC" name="teardown" finished-at="2023-03-30T16:21:15 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateVisitorAccessRequest status=SUCCESS method=CreateVisitorAccessRequest.verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:15 UTC" name="verifyCreateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-03-30T16:21:15 UTC" duration-ms="269" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create visitor access request without mandatory parameters(without Visitor name), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Mandatory payload 'firstName' is null or empty., methodName=verifyCreateVisitorAccessRequest, errorMessageType=client, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:15 UTC" name="teardown" finished-at="2023-03-30T16:21:15 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateVisitorAccessRequest status=SUCCESS method=CreateVisitorAccessRequest.verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:15 UTC" name="verifyCreateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-03-30T16:21:16 UTC" duration-ms="809" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create visitor access request without Site value, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Payload attribute site contain incorrect size, methodName=verifyCreateVisitorAccessRequest, errorMessageType=client, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:16 UTC" name="teardown" finished-at="2023-03-30T16:21:16 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateVisitorAccessRequest status=SUCCESS method=CreateVisitorAccessRequest.verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:16 UTC" name="verifyCreateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-03-30T16:21:16 UTC" duration-ms="329" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create visitor access request with invalid Location value, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Not Found, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=404, ci=, readFlag=, errorMessage=Resource not found., methodName=verifyCreateVisitorAccessRequest, errorMessageType=client, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=ABC, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:16 UTC" name="teardown" finished-at="2023-03-30T16:21:16 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateVisitorAccessRequest status=SUCCESS method=CreateVisitorAccessRequest.verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateVisitorAccessRequestForInvalidLegalentity(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:16 UTC" name="verifyCreateVisitorAccessRequestForInvalidLegalentity" data-provider="testCasesData" finished-at="2023-03-30T16:21:17 UTC" duration-ms="635" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create visitor access request for Invalid Legal  Entity , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreateVisitorAccessRequestForInvalidLegalentity, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateVisitorAccessRequestForInvalidLegalentity -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:17 UTC" name="teardown" finished-at="2023-03-30T16:21:17 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateVisitorAccessRequestForInvalidLegalentity status=SUCCESS method=CreateVisitorAccessRequest.verifyCreateVisitorAccessRequestForInvalidLegalentity(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateVisitorAccessRequestForInvalidToken(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:17 UTC" name="verifyCreateVisitorAccessRequestForInvalidToken" data-provider="testCasesData" finished-at="2023-03-30T16:21:17 UTC" duration-ms="216" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create visitor access request with Invalid Token, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreateVisitorAccessRequestForInvalidToken, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateVisitorAccessRequestForInvalidToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:17 UTC" name="teardown" finished-at="2023-03-30T16:21:17 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateVisitorAccessRequestForInvalidToken status=SUCCESS method=CreateVisitorAccessRequest.verifyCreateVisitorAccessRequestForInvalidToken(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyUploadAttachmentToVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:17 UTC" name="verifyUploadAttachmentToVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-03-30T16:21:23 UTC" duration-ms="5925" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=true, contactType=, TestCaseName=Create visitor access request and add attachment, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyUploadAttachmentToVisitorAccessRequest, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUploadAttachmentToVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160]" started-at="2023-03-30T16:21:23 UTC" name="teardown" finished-at="2023-03-30T16:21:23 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyUploadAttachmentToVisitorAccessRequest status=SUCCESS method=CreateVisitorAccessRequest.verifyUploadAttachmentToVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreateVisitorAccessRequest -->
      <class name="com.gapi.testCases.GetServiceTicketDetails">
        <test-method is-config="true" signature="generateAuthorizationToken()[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:00:54 UTC" name="generateAuthorizationToken" finished-at="2023-03-30T16:01:08 UTC" duration-ms="13710" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateAuthorizationToken -->
        <test-method is-config="true" signature="BeforeSuite()[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:08 UTC" name="BeforeSuite" finished-at="2023-03-30T16:01:08 UTC" duration-ms="109" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeSuite -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:11 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:01:19 UTC" duration-ms="8265" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Service Ticket details by filtering with Request Type of  Facilities Request, Category of Fire/Safety , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request&category=Fire/Safety, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:19 UTC" name="teardown" finished-at="2023-03-30T16:01:19 UTC" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:19 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:01:24 UTC" duration-ms="5046" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of  Facilities Request, Category of  Electrical  (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request&category=Electrical, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:24 UTC" name="teardown" finished-at="2023-03-30T16:01:24 UTC" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:24 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:01:30 UTC" duration-ms="5242" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of  Facilities Request, Category of Planned Maintenance  (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request&category=Planned Maintenance, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:30 UTC" name="teardown" finished-at="2023-03-30T16:01:30 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:30 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:01:35 UTC" duration-ms="5003" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Retrieve the Service by filtering with  Request type Planned work and RH ticket type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:35 UTC" name="teardown" finished-at="2023-03-30T16:01:35 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:35 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:01:41 UTC" duration-ms="6165" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Retrieve the Service by filtering with  Request type Urgent work and RH ticket type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:41 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:01:46 UTC" duration-ms="4888" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Retrieve the Service by filtering with  status completed Filter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=category=User Account Inquiry&status=Completed&requestType=Account Management, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:41 UTC" name="teardown" finished-at="2023-03-30T16:01:41 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:46 UTC" name="teardown" finished-at="2023-03-30T16:01:46 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:46 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:01:51 UTC" duration-ms="5095" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Retrieve the Service by filtering with  status cancelled Filter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Account Management&category=User Account Inquiry&status=Cancelled, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:51 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:01:56 UTC" duration-ms="4950" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of  Facilities Request, Category of  Cooling - Office  (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request&category=Cooling - Office, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:51 UTC" name="teardown" finished-at="2023-03-30T16:01:51 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:56 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:02:01 UTC" duration-ms="5544" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of  Facilities Request, Category of  Cooling - Datacenter  (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request&category=Cooling - Datacenter, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:01:56 UTC" name="teardown" finished-at="2023-03-30T16:01:56 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:01 UTC" name="teardown" finished-at="2023-03-30T16:02:01 UTC" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:01 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:02:06 UTC" duration-ms="4742" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets - Verify Offset(page), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=page=1, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:06 UTC" name="teardown" finished-at="2023-03-30T16:02:06 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:06 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:02:12 UTC" duration-ms="5827" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets -Verify filter - Size(Min 25 to Max 1000), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=size=25, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:12 UTC" name="teardown" finished-at="2023-03-30T16:02:12 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:12 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:02:17 UTC" duration-ms="5016" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets in In Progress Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=In Progress, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:17 UTC" name="teardown" finished-at="2023-03-30T16:02:17 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:17 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:02:23 UTC" duration-ms="5878" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets in New Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:23 UTC" name="teardown" finished-at="2023-03-30T16:02:23 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:23 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:02:29 UTC" duration-ms="5745" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of  Account Management, Category of User Account Inquiry  (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Account Management&category=User Account Inquiry, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:29 UTC" name="teardown" finished-at="2023-03-30T16:02:29 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:29 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:02:33 UTC" duration-ms="4870" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of  Accounts Receivable, Category of General Billing Inquiry  (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Accounts Receivable&category=General Billing Inquiry, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:33 UTC" name="teardown" finished-at="2023-03-30T16:02:33 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:33 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:02:38 UTC" duration-ms="4594" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with  Request Type of  Facilities Request   (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:38 UTC" name="teardown" finished-at="2023-03-30T16:02:38 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:38 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:02:43 UTC" duration-ms="4508" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Retrieve the Service by filtering with  status cancellation requested Filter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=Cancellation Requested, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:43 UTC" name="teardown" finished-at="2023-03-30T16:02:43 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:43 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:02:48 UTC" duration-ms="5232" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with Request Type of Accounts Receivable  (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Accounts Receivable, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:48 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:02:52 UTC" duration-ms="4610" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with  Request Type of Account Management   (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Account Management, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:48 UTC" name="teardown" finished-at="2023-03-30T16:02:48 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:52 UTC" name="teardown" finished-at="2023-03-30T16:02:52 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:52 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:02:58 UTC" duration-ms="5119" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of Urgent Work and category Existing cross connect or connectivity testing(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work&category=Existing cross connect or connectivity testing, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:58 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:03:02 UTC" duration-ms="4777" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of Planned Work and category Customer premise cabling(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Customer premise cabling, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:02:58 UTC" name="teardown" finished-at="2023-03-30T16:02:58 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:02 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:03:07 UTC" duration-ms="4506" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of Planned Work and category Tape swaps(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Tape swaps, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:02 UTC" name="teardown" finished-at="2023-03-30T16:03:02 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:07 UTC" name="teardown" finished-at="2023-03-30T16:03:07 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:07 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:03:11 UTC" duration-ms="4618" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of Planned Work and category Equipment installation(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Equipment installation, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:11 UTC" name="teardown" finished-at="2023-03-30T16:03:11 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:11 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:03:17 UTC" duration-ms="5561" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of Planned Work and category Equipment de-installation(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Equipment de-installation, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:17 UTC" name="teardown" finished-at="2023-03-30T16:03:17 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:17 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:03:22 UTC" duration-ms="5284" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with  Request Type of Urgent Work and category Existing cross connect or connectivity testing(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work&category=Existing cross connect or connectivity testing, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:22 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:03:27 UTC" duration-ms="4688" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with  Request Type of Urgent Work and category Equipment troubleshoot or replacement (Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work&category=Equipment troubleshoot or replacement, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:22 UTC" name="teardown" finished-at="2023-03-30T16:03:22 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:27 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:03:32 UTC" duration-ms="4651" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with  Request Type of Urgent Work and category Power cycle or reboot(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work&category=Power cycle or reboot, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:27 UTC" name="teardown" finished-at="2023-03-30T16:03:27 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:32 UTC" name="teardown" finished-at="2023-03-30T16:03:32 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:32 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:03:37 UTC" duration-ms="4951" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName= Retrieve all tickets for a location/site, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:37 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:03:42 UTC" duration-ms="5210" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with  Request Type of Planned Work and category Dedicated escort(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Dedicated escort, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:37 UTC" name="teardown" finished-at="2023-03-30T16:03:37 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:42 UTC" name="teardown" finished-at="2023-03-30T16:03:42 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:42 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:03:46 UTC" duration-ms="4580" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with  Request Type of Planned Work and category Auditing (Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Auditing, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method retried="true" signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:46 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:03:49 UTC" duration-ms="2121" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with  Request Type of Urgent Work and category KVM (keyboard, video, mouse) assistance(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work&category=KVM (keyboard, video, mouse) assistance, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [401]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [401]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(GetServiceTicketDetails.java:68)
at jdk.internal.reflect.GeneratedMethodAccessor150.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:46 UTC" name="teardown" finished-at="2023-03-30T16:03:46 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:49 UTC" name="teardown" finished-at="2023-03-30T16:03:49 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SKIP method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:49 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:03:51 UTC" duration-ms="2124" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with  Request Type of Urgent Work and category KVM (keyboard, video, mouse) assistance(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work&category=KVM (keyboard, video, mouse) assistance, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [401]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [401]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(GetServiceTicketDetails.java:68)
at jdk.internal.reflect.GeneratedMethodAccessor150.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:51 UTC" name="teardown" finished-at="2023-03-30T16:03:51 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=FAILURE method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:51 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:03:56 UTC" duration-ms="5230" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with Request Type of Urgent Work and category Other(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work&category=Other, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:56 UTC" name="teardown" finished-at="2023-03-30T16:03:56 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:03:56 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:04:01 UTC" duration-ms="5508" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with Request Type of Planned Work and category Other(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Other, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:04:01 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:04:06 UTC" duration-ms="4669" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with  Request Type of Planned Work and category Auditing (Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Auditing, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:04:01 UTC" name="teardown" finished-at="2023-03-30T16:04:01 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:04:06 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:04:11 UTC" duration-ms="4804" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with  Request Type of Planned Work and category Infrastructure Data Cabling (Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Customer premise cabling, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:04:06 UTC" name="teardown" finished-at="2023-03-30T16:04:06 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:04:11 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:04:16 UTC" duration-ms="5619" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with  Request Type of Planned Work and category Dedicated escort (Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Dedicated escort, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:04:11 UTC" name="teardown" finished-at="2023-03-30T16:04:11 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:04:16 UTC" name="teardown" finished-at="2023-03-30T16:04:16 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:04:16 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:04:22 UTC" duration-ms="5932" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with  Request Type of Planned Work and category Customer premise cabling (Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Existing cross connect or connectivity testing, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:04:22 UTC" name="teardown" finished-at="2023-03-30T16:04:22 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:04:22 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:04:28 UTC" duration-ms="5461" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with  Request Type of Planned Work and category Connectivity Circuit Testing (Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Customer premise cabling, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:04:28 UTC" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:04:33 UTC" duration-ms="5143" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Tickets with  Request Type of Planned Work and category Cabinet Power Strip Energizing    (Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Other, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:04:28 UTC" name="teardown" finished-at="2023-03-30T16:04:28 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:04:33 UTC" name="teardown" finished-at="2023-03-30T16:04:33 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="AfterSuite()[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@1c39680d]" started-at="2023-03-30T16:28:15 UTC" name="AfterSuite" finished-at="2023-03-30T16:28:16 UTC" duration-ms="637" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterSuite -->
      </class> <!-- com.gapi.testCases.GetServiceTicketDetails -->
      <class name="com.gapi.testCases.GetVisitorAccessDetails">
        <test-method signature="GetVisitorAccessDetailsInfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@3fc79729]" started-at="2023-03-30T16:23:13 UTC" name="GetVisitorAccessDetailsInfo" data-provider="testCasesData" finished-at="2023-03-30T16:23:21 UTC" duration-ms="7392" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Get  visitor access request details, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=GetVisitorAccessDetailsInfo, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GetVisitorAccessDetailsInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@3fc79729]" started-at="2023-03-30T16:23:21 UTC" name="teardown" finished-at="2023-03-30T16:23:21 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetVisitorAccessDetailsInfo status=SUCCESS method=GetVisitorAccessDetails.GetVisitorAccessDetailsInfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@3fc79729] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetVisitorAccessDetails -->
      <class name="com.gapi.testCases.CreateCustomerSupportTicket">
        <test-method signature="createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:10:33 UTC" name="createCustomerSupportTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-03-30T16:10:49 UTC" duration-ms="16576" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Customer Support Ticket And Verify  End to End Flow with RequestType and Category as Facilities Request and Electrical, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createCustomerSupportTicketAndVerifyEndToEndFlow, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Electrical, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCustomerSupportTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:10:49 UTC" name="teardown" finished-at="2023-03-30T16:10:49 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createCustomerSupportTicketAndVerifyEndToEndFlow status=SUCCESS method=CreateCustomerSupportTicket.createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:10:49 UTC" name="createCustomerSupportTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-03-30T16:11:04 UTC" duration-ms="15128" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Customer Support Ticket And Verify End to End Flow with RequestType and Category as Facilities Request and Fire/Safety, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createCustomerSupportTicketAndVerifyEndToEndFlow, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Fire/Safety, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCustomerSupportTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:04 UTC" name="teardown" finished-at="2023-03-30T16:11:04 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createCustomerSupportTicketAndVerifyEndToEndFlow status=SUCCESS method=CreateCustomerSupportTicket.createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:04 UTC" name="createCustomerSupportTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-03-30T16:11:21 UTC" duration-ms="16593" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support Ticket with Request Type as Facilities Request and Category as Planned Maintenance, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createCustomerSupportTicketAndVerifyEndToEndFlow, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCustomerSupportTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:21 UTC" name="teardown" finished-at="2023-03-30T16:11:21 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createCustomerSupportTicketAndVerifyEndToEndFlow status=SUCCESS method=CreateCustomerSupportTicket.createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="retrieveCustomerSupportTicketAttachmentusingRequestId(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:21 UTC" name="retrieveCustomerSupportTicketAttachmentusingRequestId" data-provider="testCasesData" finished-at="2023-03-30T16:11:27 UTC" duration-ms="6555" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Get all Attachment IDs related to a Customer Support ticket (by Request ID), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=retrieveCustomerSupportTicketAttachmentusingRequestId, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=sampleattachment.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveCustomerSupportTicketAttachmentusingRequestId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:27 UTC" name="teardown" finished-at="2023-03-30T16:11:27 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=retrieveCustomerSupportTicketAttachmentusingRequestId status=SUCCESS method=CreateCustomerSupportTicket.retrieveCustomerSupportTicketAttachmentusingRequestId(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCSTicketForInvalidUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:27 UTC" name="verifyCreateCSTicketForInvalidUser" data-provider="testCasesData" finished-at="2023-03-30T16:11:28 UTC" duration-ms="306" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support with Invalid user RBAC, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyCreateCSTicketForInvalidUser, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCSTicketForInvalidUser -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:28 UTC" name="teardown" finished-at="2023-03-30T16:11:28 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCSTicketForInvalidUser status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCSTicketForInvalidUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:28 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:11:32 UTC" duration-ms="4765" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support with Mandatory Fields only, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:32 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:11:37 UTC" duration-ms="4722" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support Ticket with Request Type as Facilities Request and Category as Electrical, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Electrical, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:32 UTC" name="teardown" finished-at="2023-03-30T16:11:32 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:37 UTC" name="teardown" finished-at="2023-03-30T16:11:37 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:37 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:11:42 UTC" duration-ms="4734" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support Ticket with Request Type as Amenities and Category as Elevator, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Elevator, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:42 UTC" name="teardown" finished-at="2023-03-30T16:11:42 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:42 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:11:48 UTC" duration-ms="5567" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support Ticket with Request Type as Account Management and Category as User Account Inquiry, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Account Management, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=User Account Inquiry, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:48 UTC" name="teardown" finished-at="2023-03-30T16:11:48 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:48 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:11:52 UTC" duration-ms="4973" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support Ticket with Request Type as Accounts Receivable and Category as General Billing Inquiry, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Accounts Receivable, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=General Billing Inquiry, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:52 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:11:57 UTC" duration-ms="4781" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support Ticket with Request Type as Amenities and Category as Loading Dock, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Loading Dock, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:52 UTC" name="teardown" finished-at="2023-03-30T16:11:52 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:57 UTC" name="teardown" finished-at="2023-03-30T16:11:57 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:11:57 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:12:02 UTC" duration-ms="4729" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support Ticket with Request Type as Amenities and Category as Parking, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Parking, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:02 UTC" name="teardown" finished-at="2023-03-30T16:12:02 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:02 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:12:07 UTC" duration-ms="4548" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support Ticket with Request Type as Amenities and Category as General Inquiry, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=General Inquiry, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:07 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:12:11 UTC" duration-ms="4827" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support Ticket with Request Type as Facilities Request and Category as Cooling Datacenter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Cooling - Datacenter, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:07 UTC" name="teardown" finished-at="2023-03-30T16:12:07 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:11 UTC" name="teardown" finished-at="2023-03-30T16:12:11 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:11 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:12:16 UTC" duration-ms="4961" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support Ticket with Request Type as Facilities Request and Category as Cooling Office, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Cooling - Office, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:16 UTC" name="teardown" finished-at="2023-03-30T16:12:16 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:16 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:12:21 UTC" duration-ms="4755" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support Ticket with Request Type as Facilities Request and Category as Fire/Safety, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Fire/Safety, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:21 UTC" name="teardown" finished-at="2023-03-30T16:12:21 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:21 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:12:26 UTC" duration-ms="5018" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support Ticket with Request Type as Facilities Request and Category as Planned Maintenance, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title  , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:26 UTC" name="teardown" finished-at="2023-03-30T16:12:26 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:26 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:12:31 UTC" duration-ms="4593" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support Ticket with Request Type as Facilities Request and Category as Electrical, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Electrical, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:31 UTC" name="teardown" finished-at="2023-03-30T16:12:31 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:31 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:12:36 UTC" duration-ms="4963" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create a Customer support Ticket - with all valid Mandatory Parameters (site, request type, category, title, description) , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Parking, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:36 UTC" name="teardown" finished-at="2023-03-30T16:12:36 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:36 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:12:41 UTC" duration-ms="4837" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create a Customer Support Ticket - with both Mandatory & Optional Parameters (location, customerReference, notificationRecipients)., search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=Fire/Safety, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:41 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:12:45 UTC" duration-ms="4486" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create a Customer Support Request - with Optional parameter location., search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=Fire/Safety, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:41 UTC" name="teardown" finished-at="2023-03-30T16:12:41 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:45 UTC" name="teardown" finished-at="2023-03-30T16:12:45 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:45 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:12:49 UTC" duration-ms="4469" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create a Customer Support Request - with Optional parameter Customer Reference., search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Fire/Safety, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:49 UTC" name="teardown" finished-at="2023-03-30T16:12:49 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:49 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:12:54 UTC" duration-ms="4483" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create a Customer Support Request - with  1 Notification Recipient., search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Fire/Safety, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:54 UTC" name="teardown" finished-at="2023-03-30T16:12:54 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:54 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:12:58 UTC" duration-ms="4356" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create a Customer Support Request - with multiple Notification Recipients (comma separated email addresses)., search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com,Qatest@gmai.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Parking, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:58 UTC" name="teardown" finished-at="2023-03-30T16:12:58 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:58 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:12:59 UTC" duration-ms="274" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create a Customer Support Request - with invalid Notification Recipient email format, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=test, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=400, ci=, readFlag=, errorMessage=Payload 'notificationRecipients' has an invalid email., methodName=verifyCreateCustomerSupportTicket, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Parking, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:59 UTC" name="teardown" finished-at="2023-03-30T16:12:59 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:12:59 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:13:03 UTC" duration-ms="4398" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create a Customer Support Request - By Request Type -Amenities, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Elevator, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:13:03 UTC" name="teardown" finished-at="2023-03-30T16:13:03 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:13:03 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:13:07 UTC" duration-ms="4434" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create a Customer Support Request - By Request Type -Facilities Request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title  , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:13:07 UTC" name="teardown" finished-at="2023-03-30T16:13:07 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:13:07 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:13:12 UTC" duration-ms="4403" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create a Customer Support Request - valid Title Parameter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Parking, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:13:12 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:13:16 UTC" duration-ms="4543" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create a Customer Support Request - with valid Site Parameter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Parking, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:13:12 UTC" name="teardown" finished-at="2023-03-30T16:13:12 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:13:16 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:13:22 UTC" duration-ms="5694" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create a Customer Support Request -By Request Type -Accounts Receivable, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Accounts Receivable, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=General Billing Inquiry, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:13:16 UTC" name="teardown" finished-at="2023-03-30T16:13:16 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:13:22 UTC" name="teardown" finished-at="2023-03-30T16:13:22 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:13:22 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:13:27 UTC" duration-ms="5020" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create a Customer Support Request -By Request Type -Account Management, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Account Management, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=User Account Inquiry, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:13:27 UTC" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:13:32 UTC" duration-ms="4526" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create a Customer Support Request - with Description, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Loading Dock, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:13:27 UTC" name="teardown" finished-at="2023-03-30T16:13:27 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00]" started-at="2023-03-30T16:13:32 UTC" name="teardown" finished-at="2023-03-30T16:13:32 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@1f81aa00] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreateCustomerSupportTicket -->
      <class name="com.gapi.testCases.CreatePOPPOERequest">
        <test-method signature="verifyCreatePOPPOERequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@1acaf3d]" started-at="2023-03-30T16:21:23 UTC" name="verifyCreatePOPPOERequest" data-provider="testCasesData" finished-at="2023-03-30T16:21:27 UTC" duration-ms="3657" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=true, isBulkRequest=, contactType=Visitor, TestCaseName=Create POP/POE Request with all mandatory parameters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=919876543210, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external1, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePOPPOERequest, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePOPPOERequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@1acaf3d]" started-at="2023-03-30T16:21:27 UTC" name="teardown" finished-at="2023-03-30T16:21:27 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePOPPOERequest status=SUCCESS method=CreatePOPPOERequest.verifyCreatePOPPOERequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreatePOPPOERequestForInvalidLegalEntity(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@1acaf3d]" started-at="2023-03-30T16:21:27 UTC" name="verifyCreatePOPPOERequestForInvalidLegalEntity" data-provider="testCasesData" finished-at="2023-03-30T16:21:27 UTC" duration-ms="468" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=true, isBulkRequest=, contactType=web, TestCaseName=Create POP/POE Request with invalid legal entity, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Bytedance Co., Ltd., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external1, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePOPPOERequestForInvalidLegalEntity, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePOPPOERequestForInvalidLegalEntity -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@1acaf3d]" started-at="2023-03-30T16:21:27 UTC" name="teardown" finished-at="2023-03-30T16:21:27 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePOPPOERequestForInvalidLegalEntity status=SUCCESS method=CreatePOPPOERequest.verifyCreatePOPPOERequestForInvalidLegalEntity(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyUploadAttachmentToPOPPOERequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@1acaf3d]" started-at="2023-03-30T16:21:27 UTC" name="verifyUploadAttachmentToPOPPOERequest" data-provider="testCasesData" finished-at="2023-03-30T16:21:33 UTC" duration-ms="6000" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=true, isBulkRequest=, contactType=web, TestCaseName=Create POP/POE Request and upload attachment, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Bytedance Co., Ltd., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external1, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyUploadAttachmentToPOPPOERequest, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUploadAttachmentToPOPPOERequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@1acaf3d]" started-at="2023-03-30T16:21:33 UTC" name="teardown" finished-at="2023-03-30T16:21:33 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyUploadAttachmentToPOPPOERequest status=SUCCESS method=CreatePOPPOERequest.verifyUploadAttachmentToPOPPOERequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreatePOPPOERequest -->
      <class name="com.gapi.testCases.GetShipmentsTicketDetails">
        <test-method signature="getAllShipmentsTicketsInfo()[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:17:33 UTC" name="getAllShipmentsTicketsInfo" finished-at="2023-03-30T16:17:36 UTC" duration-ms="3219" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllShipmentsTicketsInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:17:36 UTC" name="teardown" finished-at="2023-03-30T16:17:36 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllShipmentsTicketsInfo status=SUCCESS method=GetShipmentsTicketDetails.getAllShipmentsTicketsInfo()[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="retrieveShipmentTicketInfoByInvalidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:17:36 UTC" name="retrieveShipmentTicketInfoByInvalidId" data-provider="testCasesData" finished-at="2023-03-30T16:17:38 UTC" duration-ms="1825" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve S&R tickets by InValid Request ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=retrieveShipmentTicketInfoByInvalidId, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveShipmentTicketInfoByInvalidId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:17:38 UTC" name="teardown" finished-at="2023-03-30T16:17:38 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=retrieveShipmentTicketInfoByInvalidId status=SUCCESS method=GetShipmentsTicketDetails.retrieveShipmentTicketInfoByInvalidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:17:38 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:17:42 UTC" duration-ms="3775" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with  Site name, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:17:42 UTC" name="teardown" finished-at="2023-03-30T16:17:42 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:17:42 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:17:47 UTC" duration-ms="4586" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with requestType=Amenities&category=Shipping / Receiving, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=page=0&createdBy=DLR1 Super_Admin&status=Cancelled, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:17:47 UTC" name="teardown" finished-at="2023-03-30T16:17:47 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:17:47 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:17:51 UTC" duration-ms="4560" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with Status as New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:17:51 UTC" name="teardown" finished-at="2023-03-30T16:17:51 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:17:51 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:17:54 UTC" duration-ms="3291" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with Status as InProgress, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=In Progress, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:17:55 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:17:58 UTC" duration-ms="3065" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with Status as Completed, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=Completed, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:17:55 UTC" name="teardown" finished-at="2023-03-30T16:17:55 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:17:58 UTC" name="teardown" finished-at="2023-03-30T16:17:58 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:17:58 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:18:01 UTC" duration-ms="3797" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with Status as Cancelled, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=Cancelled, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:01 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:18:06 UTC" duration-ms="4796" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with requestType as Amenities, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=Cancelled, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:01 UTC" name="teardown" finished-at="2023-03-30T16:18:01 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:06 UTC" name="teardown" finished-at="2023-03-30T16:18:06 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:06 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:18:09 UTC" duration-ms="2713" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with Category as Shipping / Receiving, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=createdBy=DLR1 Super_Admin&status=In Progress, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:09 UTC" name="teardown" finished-at="2023-03-30T16:18:09 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:09 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:18:13 UTC" duration-ms="3789" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All-Retrieve the Shipments Ticket details by filtering with Limit value as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:13 UTC" name="teardown" finished-at="2023-03-30T16:18:13 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:13 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:18:16 UTC" duration-ms="3489" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with Offset values as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:16 UTC" name="teardown" finished-at="2023-03-30T16:18:16 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:16 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:18:20 UTC" duration-ms="3804" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with site as DFW10 and Status as New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:20 UTC" name="teardown" finished-at="2023-03-30T16:18:20 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:20 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:18:23 UTC" duration-ms="3402" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with site as DFW10 and  CreatedBy as John Johnson, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&size=15, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:23 UTC" name="teardown" finished-at="2023-03-30T16:18:23 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:23 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:18:28 UTC" duration-ms="4279" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with  Site as DFW10 and requestType as Amenities, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&createdBy=DLR1 Super_Admin, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:28 UTC" name="teardown" finished-at="2023-03-30T16:18:28 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:28 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:18:30 UTC" duration-ms="2665" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket by filtering with  Site as DFW10 & Category as Shipping / Receiving, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=Completed, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:30 UTC" name="teardown" finished-at="2023-03-30T16:18:30 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:30 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:18:35 UTC" duration-ms="4459" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with  Site as DFW10 & Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:35 UTC" name="teardown" finished-at="2023-03-30T16:18:35 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:35 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:18:39 UTC" duration-ms="4007" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with  Site  as DFW10& offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:39 UTC" name="teardown" finished-at="2023-03-30T16:18:39 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:39 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:18:43 UTC" duration-ms="3833" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with  Status as New and CreatedBy as John Johnson, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&createdBy=DLR1 Super_Admin, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:43 UTC" name="teardown" finished-at="2023-03-30T16:18:43 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:43 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:18:46 UTC" duration-ms="3523" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with  Status as New and Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:46 UTC" name="teardown" finished-at="2023-03-30T16:18:46 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:46 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:18:50 UTC" duration-ms="3452" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with  Status as New and offset as 20, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:50 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:18:52 UTC" duration-ms="2498" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site as DFW10 ,Status as In Progres &createdBy as John Johnson, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=In Progress&createdBy=DLR1 Super_Admin, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:50 UTC" name="teardown" finished-at="2023-03-30T16:18:50 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:52 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:18:55 UTC" duration-ms="3095" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site as DFW10 ,Status as In Progress& Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=In Progress&site=PHX015&size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:52 UTC" name="teardown" finished-at="2023-03-30T16:18:52 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:55 UTC" name="teardown" finished-at="2023-03-30T16:18:55 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:55 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:18:58 UTC" duration-ms="3219" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site as DFW10 ,Status as In Progress&offset as 20, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=In Progress&site=PHX015&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:58 UTC" name="teardown" finished-at="2023-03-30T16:18:58 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:18:58 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:03 UTC" duration-ms="4491" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site DFW10 ,Status as Cancelled,Limit as 30 & offset as 20, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=size=30&status=Cancelled&page=0&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:19:03 UTC" name="teardown" finished-at="2023-03-30T16:19:03 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:19:03 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:05 UTC" duration-ms="2411" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site DFW10 ,Status as Completed,Limit as 30 & offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=Completed&site=PHX015&page=0&size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:19:05 UTC" name="teardown" finished-at="2023-03-30T16:19:05 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:19:05 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:10 UTC" duration-ms="4373" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site as DFW10,Status as New &createdBy as John JohnSon, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&site=PHX015&createdBy=DLR1 Super_Admin, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:19:10 UTC" name="teardown" finished-at="2023-03-30T16:19:10 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:19:10 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:14 UTC" duration-ms="4511" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site as DFW10,Status as In Progress,Limit as 30 &offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=size=30&status=New&page=0&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:19:14 UTC" name="teardown" finished-at="2023-03-30T16:19:14 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:19:14 UTC" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:18 UTC" duration-ms="4128" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site as DFW10,Status as Cancelled,createdBy as John JohnSon,Limit as 30&Offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=size=30&status=Cancelled&page=0&site=PHX015&createdBy=DLR1 Super_Admin, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb]" started-at="2023-03-30T16:19:18 UTC" name="teardown" finished-at="2023-03-30T16:19:18 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@79c97cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetShipmentsTicketDetails -->
      <class name="com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket">
        <test-method signature="AddAttachmentstoRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6]" started-at="2023-03-30T16:27:12 UTC" name="AddAttachmentstoRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:27:17 UTC" duration-ms="5133" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Submit Remote Hands Request with file size 1024 MB, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=AddAttachmentstoRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=sampleattachment.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddAttachmentstoRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6]" started-at="2023-03-30T16:27:17 UTC" name="teardown" finished-at="2023-03-30T16:27:17 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddAttachmentstoRemoteHandsTicket status=SUCCESS method=AddAttachmentsToTheRemoteHandsTicket.AddAttachmentstoRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="AddAttachmentstoRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6]" started-at="2023-03-30T16:27:17 UTC" name="AddAttachmentstoRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:27:22 UTC" duration-ms="4484" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Submit Remote Hands Request with Various file types/formats, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=AddAttachmentstoRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=sampleattachment.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddAttachmentstoRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6]" started-at="2023-03-30T16:27:22 UTC" name="teardown" finished-at="2023-03-30T16:27:22 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddAttachmentstoRemoteHandsTicket status=SUCCESS method=AddAttachmentsToTheRemoteHandsTicket.AddAttachmentstoRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="addAttachmentstoRemoteHandsTicketWithOutRequestIDAndfilename(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6]" started-at="2023-03-30T16:27:22 UTC" name="addAttachmentstoRemoteHandsTicketWithOutRequestIDAndfilename" data-provider="testCasesData" finished-at="2023-03-30T16:27:22 UTC" duration-ms="273" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=RH Submit Remote hand without mandatory fields RequestID and filename, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=title sample1, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=addAttachmentstoRemoteHandsTicketWithOutRequestIDAndfilename, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addAttachmentstoRemoteHandsTicketWithOutRequestIDAndfilename -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6]" started-at="2023-03-30T16:27:22 UTC" name="teardown" finished-at="2023-03-30T16:27:22 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addAttachmentstoRemoteHandsTicketWithOutRequestIDAndfilename status=SUCCESS method=AddAttachmentsToTheRemoteHandsTicket.addAttachmentstoRemoteHandsTicketWithOutRequestIDAndfilename(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAttachmentOfRemoteHandsTicketByID(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6]" started-at="2023-03-30T16:27:22 UTC" name="getAttachmentOfRemoteHandsTicketByID" data-provider="testCasesData" finished-at="2023-03-30T16:27:29 UTC" duration-ms="7198" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Get a single Attachment related to a Remote Hands ticket  (by attachment ID), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAttachmentOfRemoteHandsTicketByID, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=sampleattachment.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAttachmentOfRemoteHandsTicketByID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6]" started-at="2023-03-30T16:27:29 UTC" name="teardown" finished-at="2023-03-30T16:27:29 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAttachmentOfRemoteHandsTicketByID status=SUCCESS method=AddAttachmentsToTheRemoteHandsTicket.getAttachmentOfRemoteHandsTicketByID(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="uploadAttachmentToTheExistingRemoteHandsTicket()[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6]" started-at="2023-03-30T16:27:29 UTC" name="uploadAttachmentToTheExistingRemoteHandsTicket" finished-at="2023-03-30T16:27:34 UTC" duration-ms="4392" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- uploadAttachmentToTheExistingRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6]" started-at="2023-03-30T16:27:34 UTC" name="teardown" finished-at="2023-03-30T16:27:34 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=uploadAttachmentToTheExistingRemoteHandsTicket status=SUCCESS method=AddAttachmentsToTheRemoteHandsTicket.uploadAttachmentToTheExistingRemoteHandsTicket()[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="uploadEmptyTextDocumentToTheValidRemoteHandsRequest()[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6]" started-at="2023-03-30T16:27:34 UTC" name="uploadEmptyTextDocumentToTheValidRemoteHandsRequest" finished-at="2023-03-30T16:27:36 UTC" duration-ms="2456" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- uploadEmptyTextDocumentToTheValidRemoteHandsRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6]" started-at="2023-03-30T16:27:36 UTC" name="teardown" finished-at="2023-03-30T16:27:36 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=uploadEmptyTextDocumentToTheValidRemoteHandsRequest status=SUCCESS method=AddAttachmentsToTheRemoteHandsTicket.uploadEmptyTextDocumentToTheValidRemoteHandsRequest()[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@6c372fe6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket -->
      <class name="com.gapi.testCases.CancelFacilityAccessTicket">
        <test-method signature="verifyCancelFaclityAccessTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@34f6515b]" started-at="2023-03-30T16:23:21 UTC" name="verifyCancelFaclityAccessTicket" data-provider="testCasesData" finished-at="2023-03-30T16:23:27 UTC" duration-ms="6393" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Cancel Facility Access Ticket, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCancelFaclityAccessTicket, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelFaclityAccessTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@34f6515b]" started-at="2023-03-30T16:23:27 UTC" name="teardown" finished-at="2023-03-30T16:23:27 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelFaclityAccessTicket status=SUCCESS method=CancelFacilityAccessTicket.verifyCancelFaclityAccessTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@34f6515b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCancelledFaclityAccessTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@34f6515b]" started-at="2023-03-30T16:23:27 UTC" name="verifyGetCancelledFaclityAccessTicket" data-provider="testCasesData" finished-at="2023-03-30T16:23:34 UTC" duration-ms="7224" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Get Cancelled Faclity Access Ticket, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetCancelledFaclityAccessTicket, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCancelledFaclityAccessTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@34f6515b]" started-at="2023-03-30T16:23:34 UTC" name="teardown" finished-at="2023-03-30T16:23:34 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCancelledFaclityAccessTicket status=SUCCESS method=CancelFacilityAccessTicket.verifyGetCancelledFaclityAccessTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@34f6515b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CancelFacilityAccessTicket -->
      <class name="com.gapi.testCases.CancelCustomerSupportTicket">
        <test-method signature="verifyCancelCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@78a773fd]" started-at="2023-03-30T16:24:58 UTC" name="verifyCancelCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:25:04 UTC" duration-ms="6198" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Cancel Customer Support Ticket in Status - New   (with mandatory fields ID and Cancel Reason as 'Request no longer needed'), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=Request no longer needed, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCancelCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelCustomerSupportTicket -->
        <test-method signature="verifyCancelCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@78a773fd]" started-at="2023-03-30T16:25:04 UTC" name="verifyCancelCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:25:10 UTC" duration-ms="6358" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Cancel Customer Support Ticket in Status - New   (with mandatory fields ID and Cancel Reason as 'Request entered in error'), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=Request entered in error, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCancelCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@78a773fd]" started-at="2023-03-30T16:25:04 UTC" name="teardown" finished-at="2023-03-30T16:25:04 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelCustomerSupportTicket status=SUCCESS method=CancelCustomerSupportTicket.verifyCancelCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@78a773fd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@78a773fd]" started-at="2023-03-30T16:25:10 UTC" name="teardown" finished-at="2023-03-30T16:25:10 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelCustomerSupportTicket status=SUCCESS method=CancelCustomerSupportTicket.verifyCancelCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@78a773fd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCancelCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@78a773fd]" started-at="2023-03-30T16:25:10 UTC" name="verifyCancelCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:25:16 UTC" duration-ms="6271" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Cancel Customer Support ticket without specifying Mandatory fields ID or Cancel Reason, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCancelCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@78a773fd]" started-at="2023-03-30T16:25:16 UTC" name="teardown" finished-at="2023-03-30T16:25:16 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelCustomerSupportTicket status=SUCCESS method=CancelCustomerSupportTicket.verifyCancelCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@78a773fd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CancelCustomerSupportTicket -->
      <class name="com.gapi.testCases.GetPermissionGroupDetails">
        <test-method signature="createPermissionGroupInfoByGroupId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetPermissionGroupDetails@404bbcbd]" started-at="2023-03-30T16:20:58 UTC" name="createPermissionGroupInfoByGroupId" data-provider="testCasesData" finished-at="2023-03-30T16:20:59 UTC" duration-ms="1288" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate Permission Group info using permission id, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=createPermissionGroupInfoByGroupId, errorMessageType=, standardVisitorBadgeStr=, filters=Billing679, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createPermissionGroupInfoByGroupId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPermissionGroupDetails@404bbcbd]" started-at="2023-03-30T16:20:59 UTC" name="teardown" finished-at="2023-03-30T16:20:59 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createPermissionGroupInfoByGroupId status=SUCCESS method=GetPermissionGroupDetails.createPermissionGroupInfoByGroupId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetPermissionGroupDetails@404bbcbd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getPermissionGroupInfoByGroupId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetPermissionGroupDetails@404bbcbd]" started-at="2023-03-30T16:20:59 UTC" name="getPermissionGroupInfoByGroupId" data-provider="testCasesData" finished-at="2023-03-30T16:21:00 UTC" duration-ms="854" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate if we are able to retrieve Permission Group ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getPermissionGroupInfoByGroupId, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPermissionGroupInfoByGroupId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPermissionGroupDetails@404bbcbd]" started-at="2023-03-30T16:21:00 UTC" name="teardown" finished-at="2023-03-30T16:21:00 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPermissionGroupInfoByGroupId status=SUCCESS method=GetPermissionGroupDetails.getPermissionGroupInfoByGroupId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetPermissionGroupDetails@404bbcbd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetPermissionGroupDetails -->
      <class name="com.gapi.testCases.GetAccounts">
        <test-method signature="getAccountsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAccounts@42a15bdc]" started-at="2023-03-30T16:19:25 UTC" name="getAccountsInformation" data-provider="testCasesData" finished-at="2023-03-30T16:19:26 UTC" duration-ms="398" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate Account IDP, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAccountsInformation, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAccountsInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAccounts@42a15bdc]" started-at="2023-03-30T16:19:26 UTC" name="teardown" finished-at="2023-03-30T16:19:26 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAccountsInformation status=SUCCESS method=GetAccounts.getAccountsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAccounts@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetAccounts -->
      <class name="com.gapi.testCases.GetCities">
        <test-method signature="getCitiesInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@27e47833]" started-at="2023-03-30T16:19:35 UTC" name="getCitiesInformation" data-provider="testCasesData" finished-at="2023-03-30T16:19:36 UTC" duration-ms="715" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate if the Response has cities field in addition to the 200 code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCitiesInformation, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCitiesInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCities@27e47833]" started-at="2023-03-30T16:19:36 UTC" name="teardown" finished-at="2023-03-30T16:19:36 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCitiesInformation status=SUCCESS method=GetCities.getCitiesInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@27e47833] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@27e47833]" started-at="2023-03-30T16:19:36 UTC" name="getCitiesInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:37 UTC" duration-ms="646" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Cities using account id,Region&Country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCitiesInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWbQAM&region=North America&country=United States&city=Lithia Springs, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCitiesInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCities@27e47833]" started-at="2023-03-30T16:19:37 UTC" name="teardown" finished-at="2023-03-30T16:19:37 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCitiesInformationUsingDifferentFilters status=SUCCESS method=GetCities.getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@27e47833] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@27e47833]" started-at="2023-03-30T16:19:37 UTC" name="getCitiesInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:37 UTC" duration-ms="663" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Cities using account id,Market &Country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCitiesInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWbQAM&country=United States&city=Lithia Springs&market=Atlanta, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCitiesInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCities@27e47833]" started-at="2023-03-30T16:19:37 UTC" name="teardown" finished-at="2023-03-30T16:19:37 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCitiesInformationUsingDifferentFilters status=SUCCESS method=GetCities.getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@27e47833] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@27e47833]" started-at="2023-03-30T16:19:37 UTC" name="getCitiesInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:38 UTC" duration-ms="749" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Cities using account id,Region,Country &Market, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCitiesInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWbQAM&region=North America&country=United States&market=Atlanta, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCitiesInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCities@27e47833]" started-at="2023-03-30T16:19:38 UTC" name="teardown" finished-at="2023-03-30T16:19:38 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCitiesInformationUsingDifferentFilters status=SUCCESS method=GetCities.getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@27e47833] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@27e47833]" started-at="2023-03-30T16:19:38 UTC" name="getCitiesInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:39 UTC" duration-ms="881" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Cities using account id,Region &Market, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCitiesInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWbQAM&region=North America&market=Atlanta, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCitiesInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCities@27e47833]" started-at="2023-03-30T16:19:39 UTC" name="teardown" finished-at="2023-03-30T16:19:39 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCitiesInformationUsingDifferentFilters status=SUCCESS method=GetCities.getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@27e47833] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@27e47833]" started-at="2023-03-30T16:19:39 UTC" name="getCitiesInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:40 UTC" duration-ms="722" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Cities using account id &Country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCitiesInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWbQAM&country=United States, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCitiesInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCities@27e47833]" started-at="2023-03-30T16:19:40 UTC" name="teardown" finished-at="2023-03-30T16:19:40 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCitiesInformationUsingDifferentFilters status=SUCCESS method=GetCities.getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@27e47833] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@27e47833]" started-at="2023-03-30T16:19:40 UTC" name="getCitiesInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:41 UTC" duration-ms="969" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Cities using account id &Region, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCitiesInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWbQAM&region=North America, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCitiesInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCities@27e47833]" started-at="2023-03-30T16:19:41 UTC" name="teardown" finished-at="2023-03-30T16:19:41 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCitiesInformationUsingDifferentFilters status=SUCCESS method=GetCities.getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@27e47833] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetCities -->
      <class name="com.gapi.testCases.EditCustomerSupportTicket">
        <test-method signature="verifyEditCustomerReferenceOfAnExistingCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@1187c9e8]" started-at="2023-03-30T16:24:20 UTC" name="verifyEditCustomerReferenceOfAnExistingCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:24:27 UTC" duration-ms="6302" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Edit the CustomerReference of an Existing Customer Support Ticket in New Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditCustomerReferenceOfAnExistingCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditCustomerReferenceOfAnExistingCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@1187c9e8]" started-at="2023-03-30T16:24:27 UTC" name="teardown" finished-at="2023-03-30T16:24:27 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditCustomerReferenceOfAnExistingCustomerSupportTicket status=SUCCESS method=EditCustomerSupportTicket.verifyEditCustomerReferenceOfAnExistingCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@1187c9e8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditDescriptionOfAnExistingCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@1187c9e8]" started-at="2023-03-30T16:24:27 UTC" name="verifyEditDescriptionOfAnExistingCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:24:32 UTC" duration-ms="5260" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Edit the Description of an Existing Customer Support Ticket in New Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditDescriptionOfAnExistingCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditDescriptionOfAnExistingCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@1187c9e8]" started-at="2023-03-30T16:24:32 UTC" name="teardown" finished-at="2023-03-30T16:24:32 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditDescriptionOfAnExistingCustomerSupportTicket status=SUCCESS method=EditCustomerSupportTicket.verifyEditDescriptionOfAnExistingCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@1187c9e8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditNotificationRecipientsOfAnExistingCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@1187c9e8]" started-at="2023-03-30T16:24:32 UTC" name="verifyEditNotificationRecipientsOfAnExistingCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:24:37 UTC" duration-ms="5345" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Edit the Notification Recipients of an Existing Customer Support Ticket in New Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditNotificationRecipientsOfAnExistingCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditNotificationRecipientsOfAnExistingCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@1187c9e8]" started-at="2023-03-30T16:24:37 UTC" name="teardown" finished-at="2023-03-30T16:24:37 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditNotificationRecipientsOfAnExistingCustomerSupportTicket status=SUCCESS method=EditCustomerSupportTicket.verifyEditNotificationRecipientsOfAnExistingCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@1187c9e8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditTitleOfAnExistingCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@1187c9e8]" started-at="2023-03-30T16:24:37 UTC" name="verifyEditTitleOfAnExistingCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:24:42 UTC" duration-ms="5062" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Edit the title of an Existing Customer Support Ticket in New Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditTitleOfAnExistingCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditTitleOfAnExistingCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@1187c9e8]" started-at="2023-03-30T16:24:42 UTC" name="teardown" finished-at="2023-03-30T16:24:42 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditTitleOfAnExistingCustomerSupportTicket status=SUCCESS method=EditCustomerSupportTicket.verifyEditTitleOfAnExistingCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@1187c9e8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.EditCustomerSupportTicket -->
      <class name="com.gapi.testCases.GetNotificationDetails">
        <test-method signature="getAllNotificationDetailsInfo()[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:22:33 UTC" name="getAllNotificationDetailsInfo" finished-at="2023-03-30T16:22:36 UTC" duration-ms="3521" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllNotificationDetailsInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:22:36 UTC" name="teardown" finished-at="2023-03-30T16:22:36 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllNotificationDetailsInfo status=SUCCESS method=GetNotificationDetails.getAllNotificationDetailsInfo()[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getNotificationDetailsById()[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:22:36 UTC" name="getNotificationDetailsById" finished-at="2023-03-30T16:22:43 UTC" duration-ms="6697" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getNotificationDetailsById -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:22:43 UTC" name="teardown" finished-at="2023-03-30T16:22:43 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getNotificationDetailsById status=SUCCESS method=GetNotificationDetails.getNotificationDetailsById()[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getNotificationDetailsByNegativeToken(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:22:43 UTC" name="getNotificationDetailsByNegativeToken" data-provider="testCasesData" finished-at="2023-03-30T16:22:46 UTC" duration-ms="3520" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=N-Planned Site Maintenance - Retrieve without mandatory Headers( Token)_ Negative, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Unauthorized, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=401, ci=, readFlag=, errorMessage=Unauthorized. Access token is missing or invalid., methodName=getNotificationDetailsByNegativeToken, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getNotificationDetailsByNegativeToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:22:46 UTC" name="teardown" finished-at="2023-03-30T16:22:46 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getNotificationDetailsByNegativeToken status=SUCCESS method=GetNotificationDetails.getNotificationDetailsByNegativeToken(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="updateAttributesOfNotification(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:22:46 UTC" name="updateAttributesOfNotification" data-provider="testCasesData" finished-at="2023-03-30T16:22:50 UTC" duration-ms="3521" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Update a All attribute with wrong values of an existing Notification using NotificationId, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag="xyz", customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag="abc", errorMessage=, methodName=updateAttributesOfNotification, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateAttributesOfNotification -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:22:50 UTC" name="teardown" finished-at="2023-03-30T16:22:50 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateAttributesOfNotification status=SUCCESS method=GetNotificationDetails.updateAttributesOfNotification(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:22:50 UTC" name="updateNotificationById" data-provider="testCasesData" finished-at="2023-03-30T16:22:57 UTC" duration-ms="7333" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Update a All attribute of an existing Notification using valid NotificationId, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=true, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=true, errorMessage=, methodName=updateNotificationById, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateNotificationById -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:22:57 UTC" name="teardown" finished-at="2023-03-30T16:22:57 UTC" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateNotificationById status=SUCCESS method=GetNotificationDetails.updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:22:57 UTC" name="updateNotificationById" data-provider="testCasesData" finished-at="2023-03-30T16:23:05 UTC" duration-ms="7451" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Update a DeleteFlag attribute of an existing Notification using valid NotificationId, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=true, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=false, errorMessage=, methodName=updateNotificationById, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateNotificationById -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:23:05 UTC" name="teardown" finished-at="2023-03-30T16:23:05 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateNotificationById status=SUCCESS method=GetNotificationDetails.updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:23:05 UTC" name="updateNotificationById" data-provider="testCasesData" finished-at="2023-03-30T16:23:12 UTC" duration-ms="7504" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Update a ReadFlag attribute of an existing Notification using valid NotificationId, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=false, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=true, errorMessage=, methodName=updateNotificationById, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateNotificationById -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:23:12 UTC" name="teardown" finished-at="2023-03-30T16:23:12 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateNotificationById status=SUCCESS method=GetNotificationDetails.updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="updateNotificationByInvalidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:23:12 UTC" name="updateNotificationByInvalidId" data-provider="testCasesData" finished-at="2023-03-30T16:23:13 UTC" duration-ms="570" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Update a All attribute of an existing Notification using Invalid NotificationId, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=true, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=true, errorMessage=, methodName=updateNotificationByInvalidId, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateNotificationByInvalidId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:23:13 UTC" name="teardown" finished-at="2023-03-30T16:23:13 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateNotificationByInvalidId status=SUCCESS method=GetNotificationDetails.updateNotificationByInvalidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetNotificationInfoByInvalidId()[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:23:13 UTC" name="verifyGetNotificationInfoByInvalidId" finished-at="2023-03-30T16:23:13 UTC" duration-ms="524" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetNotificationInfoByInvalidId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1]" started-at="2023-03-30T16:23:13 UTC" name="teardown" finished-at="2023-03-30T16:23:13 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetNotificationInfoByInvalidId status=SUCCESS method=GetNotificationDetails.verifyGetNotificationInfoByInvalidId()[pri:0, instance:com.gapi.testCases.GetNotificationDetails@389c4eb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetNotificationDetails -->
      <class name="com.gapi.testCases.GetReportsRequest">
        <test-method signature="getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:30 UTC" name="getAllSecurityPlannedReportsMaintenanceSortBy" data-provider="testCasesData" finished-at="2023-03-30T16:20:32 UTC" duration-ms="1237" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Get All SecurityPlanned Site  Maintenance Reports - Sort By- Site, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=85ed98e51bdea8d46eada9bfbd4bcb13, readFlag=, errorMessage=, methodName=getAllSecurityPlannedReportsMaintenanceSortBy, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=site,desc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSecurityPlannedReportsMaintenanceSortBy -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:32 UTC" name="teardown" finished-at="2023-03-30T16:20:32 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSecurityPlannedReportsMaintenanceSortBy status=SUCCESS method=GetReportsRequest.getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:32 UTC" name="getAllSecurityPlannedReportsMaintenanceSortBy" data-provider="testCasesData" finished-at="2023-03-30T16:20:33 UTC" duration-ms="963" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Get All SecurityPlanned Site  Maintenance Reports -Sort By - Location, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=85ed98e51bdea8d46eada9bfbd4bcb13, readFlag=, errorMessage=, methodName=getAllSecurityPlannedReportsMaintenanceSortBy, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=location,desc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSecurityPlannedReportsMaintenanceSortBy -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:33 UTC" name="teardown" finished-at="2023-03-30T16:20:33 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSecurityPlannedReportsMaintenanceSortBy status=SUCCESS method=GetReportsRequest.getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:33 UTC" name="getAllSecurityPlannedReportsMaintenanceSortBy" data-provider="testCasesData" finished-at="2023-03-30T16:20:34 UTC" duration-ms="964" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Get All SecurityPlanned Site  Maintenance Reports- Sort By - Report Name, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=85ed98e51bdea8d46eada9bfbd4bcb13, readFlag=, errorMessage=, methodName=getAllSecurityPlannedReportsMaintenanceSortBy, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=shortDescription,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSecurityPlannedReportsMaintenanceSortBy -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:34 UTC" name="teardown" finished-at="2023-03-30T16:20:34 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSecurityPlannedReportsMaintenanceSortBy status=SUCCESS method=GetReportsRequest.getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:34 UTC" name="getAllSecurityPlannedReportsMaintenanceSortBy" data-provider="testCasesData" finished-at="2023-03-30T16:20:35 UTC" duration-ms="899" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Get All SecurityPlanned Site  Maintenance Reports- Sort By - Report Start Date, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=85ed98e51bdea8d46eada9bfbd4bcb13, readFlag=, errorMessage=, methodName=getAllSecurityPlannedReportsMaintenanceSortBy, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=startdate,desc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSecurityPlannedReportsMaintenanceSortBy -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:35 UTC" name="teardown" finished-at="2023-03-30T16:20:35 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSecurityPlannedReportsMaintenanceSortBy status=SUCCESS method=GetReportsRequest.getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:35 UTC" name="getAllSecurityPlannedReportsMaintenanceSortBy" data-provider="testCasesData" finished-at="2023-03-30T16:20:35 UTC" duration-ms="952" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Get All SecurityPlanned Site  Maintenance Reports- Sort By - Report End Date, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=85ed98e51bdea8d46eada9bfbd4bcb13, readFlag=, errorMessage=, methodName=getAllSecurityPlannedReportsMaintenanceSortBy, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=enddate,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSecurityPlannedReportsMaintenanceSortBy -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:35 UTC" name="teardown" finished-at="2023-03-30T16:20:35 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSecurityPlannedReportsMaintenanceSortBy status=SUCCESS method=GetReportsRequest.getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:35 UTC" name="getDCIMReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:36 UTC" duration-ms="988" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Sort the DCIM Report by Start Date, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getDCIMReportsSortedWithDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?startDate,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getDCIMReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:36 UTC" name="teardown" finished-at="2023-03-30T16:20:36 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getDCIMReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:36 UTC" name="getDCIMReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:37 UTC" duration-ms="947" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Sort the DCIM Report by Name, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getDCIMReportsSortedWithDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?name,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getDCIMReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:37 UTC" name="teardown" finished-at="2023-03-30T16:20:37 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getDCIMReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:37 UTC" name="getDCIMReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:38 UTC" duration-ms="991" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Sort the DCIM Report by Type, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getDCIMReportsSortedWithDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?type,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getDCIMReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:38 UTC" name="teardown" finished-at="2023-03-30T16:20:38 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getDCIMReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:38 UTC" name="getDCIMReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:39 UTC" duration-ms="958" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Sort the DCIM Report by Location, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getDCIMReportsSortedWithDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?location,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getDCIMReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:39 UTC" name="teardown" finished-at="2023-03-30T16:20:39 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getDCIMReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:39 UTC" name="getDCIMReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:40 UTC" duration-ms="923" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Sort the DCIM Report by Site, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getDCIMReportsSortedWithDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?site,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getDCIMReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:40 UTC" name="teardown" finished-at="2023-03-30T16:20:40 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getDCIMReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getDownloadReportByDCIMID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:40 UTC" name="getDownloadReportByDCIMID" data-provider="testCasesData" finished-at="2023-03-30T16:20:45 UTC" duration-ms="4298" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Download Report by DCIM ID, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getDownloadReportByDCIMID, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getDownloadReportByDCIMID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:45 UTC" name="teardown" finished-at="2023-03-30T16:20:45 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getDownloadReportByDCIMID status=SUCCESS method=GetReportsRequest.getDownloadReportByDCIMID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getDownloadReportBySecurityID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:45 UTC" name="getDownloadReportBySecurityID" data-provider="testCasesData" finished-at="2023-03-30T16:20:48 UTC" duration-ms="3323" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Download Report by Security ID, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getDownloadReportBySecurityID, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getDownloadReportBySecurityID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:48 UTC" name="teardown" finished-at="2023-03-30T16:20:48 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getDownloadReportBySecurityID status=SUCCESS method=GetReportsRequest.getDownloadReportBySecurityID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getReportsDetails()[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:48 UTC" name="getReportsDetails" finished-at="2023-03-30T16:20:49 UTC" duration-ms="1423" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getReportsDetails -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:49 UTC" name="teardown" finished-at="2023-03-30T16:20:49 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getReportsDetails status=SUCCESS method=GetReportsRequest.getReportsDetails()[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getReportsDetailsSortBySite(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:49 UTC" name="getReportsDetailsSortBySite" data-provider="testCasesData" finished-at="2023-03-30T16:20:49 UTC" duration-ms="145" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Get All Security Reports - Sort By- Site, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-uat3@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getReportsDetailsSortBySite, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=site,desc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getReportsDetailsSortBySite -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:49 UTC" name="teardown" finished-at="2023-03-30T16:20:49 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getReportsDetailsSortBySite status=SUCCESS method=GetReportsRequest.getReportsDetailsSortBySite(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getReportsDetailsusingFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:49 UTC" name="getReportsDetailsusingFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:51 UTC" duration-ms="1037" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Report List - DCIM, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getReportsDetailsusingFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?reportType=DCIM, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getReportsDetailsusingFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:51 UTC" name="teardown" finished-at="2023-03-30T16:20:51 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getReportsDetailsusingFilters status=SUCCESS method=GetReportsRequest.getReportsDetailsusingFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getReportsDetailsusingFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:51 UTC" name="getReportsDetailsusingFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:52 UTC" duration-ms="1153" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Report List - Security, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getReportsDetailsusingFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?reportType=Security, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getReportsDetailsusingFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:52 UTC" name="teardown" finished-at="2023-03-30T16:20:52 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getReportsDetailsusingFilters status=SUCCESS method=GetReportsRequest.getReportsDetailsusingFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getReportsWorkOrdersDetails()[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:52 UTC" name="getReportsWorkOrdersDetails" finished-at="2023-03-30T16:20:53 UTC" duration-ms="1485" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getReportsWorkOrdersDetails -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:53 UTC" name="teardown" finished-at="2023-03-30T16:20:53 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getReportsWorkOrdersDetails status=SUCCESS method=GetReportsRequest.getReportsWorkOrdersDetails()[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="invalidReportByDCIMID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:53 UTC" name="invalidReportByDCIMID" data-provider="testCasesData" finished-at="2023-03-30T16:20:54 UTC" duration-ms="387" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Download Report - DCIM By invalid ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Internal Server Error, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=500.0, ci=, readFlag=, errorMessage=, methodName=invalidReportByDCIMID, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=enddate,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidReportByDCIMID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:54 UTC" name="teardown" finished-at="2023-03-30T16:20:54 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=invalidReportByDCIMID status=SUCCESS method=GetReportsRequest.invalidReportByDCIMID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="invalidReportBySecurityID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:54 UTC" name="invalidReportBySecurityID" data-provider="testCasesData" finished-at="2023-03-30T16:20:54 UTC" duration-ms="343" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Download Report - Security By invalid ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Internal Server Error, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=500.0, ci=, readFlag=, errorMessage=, methodName=invalidReportBySecurityID, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=enddate,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidReportBySecurityID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:54 UTC" name="teardown" finished-at="2023-03-30T16:20:54 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=invalidReportBySecurityID status=SUCCESS method=GetReportsRequest.invalidReportBySecurityID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:54 UTC" name="securityReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:55 UTC" duration-ms="849" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Get All Security Reports- Sort By - ReportID, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-uat3@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=979fde4013dfe300edd63c928144b05d, readFlag=, errorMessage=, methodName=securityReportsSortedWithDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?reportType=Security&reportID=CUS1750153, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- securityReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:55 UTC" name="teardown" finished-at="2023-03-30T16:20:55 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=securityReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:55 UTC" name="securityReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:56 UTC" duration-ms="802" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Get All Security Reports- Sort By - Report End Date, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-uat3@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=979fde4013dfe300edd63c928144b05d, readFlag=, errorMessage=, methodName=securityReportsSortedWithDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?reportType=Security&EndDate.desc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- securityReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:56 UTC" name="teardown" finished-at="2023-03-30T16:20:56 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=securityReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:56 UTC" name="securityReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:56 UTC" duration-ms="867" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Get All Security Reports- Sort By - Report Start Date, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-uat3@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=979fde4013dfe300edd63c928144b05d, readFlag=, errorMessage=, methodName=securityReportsSortedWithDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?reportType=Security&StartDate.asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- securityReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:56 UTC" name="teardown" finished-at="2023-03-30T16:20:56 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=securityReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:56 UTC" name="securityReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:57 UTC" duration-ms="851" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Get All Security Reports- Sort By - Report Name, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-uat3@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=979fde4013dfe300edd63c928144b05d, readFlag=, errorMessage=, methodName=securityReportsSortedWithDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?reportType=Security&name.asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- securityReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:57 UTC" name="teardown" finished-at="2023-03-30T16:20:57 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=securityReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:57 UTC" name="securityReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:58 UTC" duration-ms="869" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Get All Security Reports- Sort By - Report Type, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-uat3@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=979fde4013dfe300edd63c928144b05d, readFlag=, errorMessage=, methodName=securityReportsSortedWithDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?reportType=Security&type.asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- securityReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be]" started-at="2023-03-30T16:20:58 UTC" name="teardown" finished-at="2023-03-30T16:20:58 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=securityReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@379614be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetReportsRequest -->
      <class name="com.gapi.testCases.GetCustomerSupportTicketDetails">
        <test-method signature="getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:32 UTC" name="getCategoryListForCustomerSupportRequestType" data-provider="testCasesData" finished-at="2023-03-30T16:13:32 UTC" duration-ms="291" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Retrieve Category list for Facilities Request Request Type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=requestType=Facilities Request, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCategoryListForCustomerSupportRequestType, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCategoryListForCustomerSupportRequestType -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:32 UTC" name="teardown" finished-at="2023-03-30T16:13:32 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCategoryListForCustomerSupportRequestType status=SUCCESS method=GetCustomerSupportTicketDetails.getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:32 UTC" name="getCategoryListForCustomerSupportRequestType" data-provider="testCasesData" finished-at="2023-03-30T16:13:32 UTC" duration-ms="299" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Retrieve Category list for Amenities Request Type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=requestType=Amenities, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCategoryListForCustomerSupportRequestType, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCategoryListForCustomerSupportRequestType -->
        <test-method signature="getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:32 UTC" name="getCategoryListForCustomerSupportRequestType" data-provider="testCasesData" finished-at="2023-03-30T16:13:33 UTC" duration-ms="308" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Retrieve Category list for Accounts Receivable Request Type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=requestType=Accounts Receivable, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCategoryListForCustomerSupportRequestType, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCategoryListForCustomerSupportRequestType -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:32 UTC" name="teardown" finished-at="2023-03-30T16:13:32 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCategoryListForCustomerSupportRequestType status=SUCCESS method=GetCustomerSupportTicketDetails.getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:33 UTC" name="teardown" finished-at="2023-03-30T16:13:33 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCategoryListForCustomerSupportRequestType status=SUCCESS method=GetCustomerSupportTicketDetails.getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:33 UTC" name="getCategoryListForCustomerSupportRequestType" data-provider="testCasesData" finished-at="2023-03-30T16:13:33 UTC" duration-ms="293" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Retrieve Category list for Account Management Request Type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=requestType=Account Management, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCategoryListForCustomerSupportRequestType, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCategoryListForCustomerSupportRequestType -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:33 UTC" name="teardown" finished-at="2023-03-30T16:13:33 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCategoryListForCustomerSupportRequestType status=SUCCESS method=GetCustomerSupportTicketDetails.getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:33 UTC" name="getCategoryListForCustomerSupportRequestType" data-provider="testCasesData" finished-at="2023-03-30T16:13:33 UTC" duration-ms="272" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Retrieve Category list for Invalid RequestType , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=requestType=abc, expectedStatusCode=400, ci=, readFlag=, errorMessage=Query parameter 'requestType' has an unexpected value., methodName=getCategoryListForCustomerSupportRequestType, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCategoryListForCustomerSupportRequestType -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:33 UTC" name="teardown" finished-at="2023-03-30T16:13:33 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCategoryListForCustomerSupportRequestType status=SUCCESS method=GetCustomerSupportTicketDetails.getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCustomerSupportTicketInfoByInvalidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:33 UTC" name="verifyCustomerSupportTicketInfoByInvalidId" data-provider="testCasesData" finished-at="2023-03-30T16:13:34 UTC" duration-ms="428" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Customer Support Request details by - Invalid Request ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=404, ci=, readFlag=, errorMessage=, methodName=verifyCustomerSupportTicketInfoByInvalidId, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCustomerSupportTicketInfoByInvalidId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:34 UTC" name="teardown" finished-at="2023-03-30T16:13:34 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCustomerSupportTicketInfoByInvalidId status=SUCCESS method=GetCustomerSupportTicketDetails.verifyCustomerSupportTicketInfoByInvalidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:34 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:13:38 UTC" duration-ms="4447" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Retrieve the CustomerSupportTickets by filtering with  Site name, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:38 UTC" name="teardown" finished-at="2023-03-30T16:13:38 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:38 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:13:43 UTC" duration-ms="4885" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTicket by filtering with Status as New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:43 UTC" name="teardown" finished-at="2023-03-30T16:13:43 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:43 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:13:46 UTC" duration-ms="3612" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Status as InProgress, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=In Progress, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:46 UTC" name="teardown" finished-at="2023-03-30T16:13:46 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:46 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:13:51 UTC" duration-ms="4972" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Status as Completed, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=Completed, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:51 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:13:56 UTC" duration-ms="4259" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Status as Cancelled, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=Cancelled, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:51 UTC" name="teardown" finished-at="2023-03-30T16:13:51 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:56 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:14:01 UTC" duration-ms="5022" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with requestType as Account Management, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Account Management, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:13:56 UTC" name="teardown" finished-at="2023-03-30T16:13:56 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:01 UTC" name="teardown" finished-at="2023-03-30T16:14:01 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:01 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:14:06 UTC" duration-ms="4795" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with requestType as Accounts Receivable, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Accounts Receivable, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:06 UTC" name="teardown" finished-at="2023-03-30T16:14:06 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:06 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:14:10 UTC" duration-ms="4139" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with requestType as Facilities Request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:10 UTC" name="teardown" finished-at="2023-03-30T16:14:10 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:10 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:14:15 UTC" duration-ms="5147" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with requestType as Amenities, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Amenities, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:15 UTC" name="teardown" finished-at="2023-03-30T16:14:15 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:15 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:14:20 UTC" duration-ms="5029" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Category as User Account Inquiry, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=category=User Account Inquiry, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:20 UTC" name="teardown" finished-at="2023-03-30T16:14:20 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:20 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:14:24 UTC" duration-ms="4367" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Category as General Billing Inquiry, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=category=General Billing Inquiry, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:24 UTC" name="teardown" finished-at="2023-03-30T16:14:24 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:24 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:14:30 UTC" duration-ms="5480" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Category as Elevator, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=category=Elevator, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:30 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:14:34 UTC" duration-ms="4714" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Category as Electrical, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=category=Electrical, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:30 UTC" name="teardown" finished-at="2023-03-30T16:14:30 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:34 UTC" name="teardown" finished-at="2023-03-30T16:14:34 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:34 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:14:40 UTC" duration-ms="5109" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Category as Cooling-Datacenter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=category=Cooling - Datacenter, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:40 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:14:44 UTC" duration-ms="4413" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Category as Cooling-Office, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=category=Cooling - Office, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:40 UTC" name="teardown" finished-at="2023-03-30T16:14:40 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:44 UTC" name="teardown" finished-at="2023-03-30T16:14:44 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:44 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:14:49 UTC" duration-ms="4845" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with site as DFW10 and Status as New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:49 UTC" name="teardown" finished-at="2023-03-30T16:14:49 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:49 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:14:53 UTC" duration-ms="4052" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with  Site as DFW10 and requestType as Facilities Request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&requestType=Facilities Request, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:53 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:14:58 UTC" duration-ms="4746" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with  Site as DFW10 & Category as General Billing Inquiry, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&category=General Billing Inquiry, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:53 UTC" name="teardown" finished-at="2023-03-30T16:14:53 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:58 UTC" name="teardown" finished-at="2023-03-30T16:14:58 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:14:58 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:15:02 UTC" duration-ms="3946" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with  Site as DFW10 & Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&size=20, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:02 UTC" name="teardown" finished-at="2023-03-30T16:15:02 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:02 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:15:06 UTC" duration-ms="4098" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with  Site  as DFW10& offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:06 UTC" name="teardown" finished-at="2023-03-30T16:15:06 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:06 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:15:11 UTC" duration-ms="4917" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with  Status as NEW  & requestType Account Management, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&requestType=Account Management, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:11 UTC" name="teardown" finished-at="2023-03-30T16:15:11 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:11 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:15:16 UTC" duration-ms="4960" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with  Status as New & Category as  Elevator, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&category=Elevator, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:16 UTC" name="teardown" finished-at="2023-03-30T16:15:16 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:16 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:15:20 UTC" duration-ms="4332" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with  Status as New and Size as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:20 UTC" name="teardown" finished-at="2023-03-30T16:15:20 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:20 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:15:24 UTC" duration-ms="4177" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with  Status as New and Page as 20, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:24 UTC" name="teardown" finished-at="2023-03-30T16:15:24 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:24 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:15:28 UTC" duration-ms="3522" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with  Status as In Progress,size=25 and Page as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=In Progress&size=25&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:28 UTC" name="teardown" finished-at="2023-03-30T16:15:28 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:28 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:15:32 UTC" duration-ms="4561" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with requestType as Amenities and Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Amenities&size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:32 UTC" name="teardown" finished-at="2023-03-30T16:15:32 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:32 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:15:36 UTC" duration-ms="4167" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with requestType as Facilities Request and Offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request&page=10, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:36 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:15:40 UTC" duration-ms="3599" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Category as User Account Inquiry& Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=category=User Account Inquiry&size=15, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:36 UTC" name="teardown" finished-at="2023-03-30T16:15:36 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:40 UTC" name="teardown" finished-at="2023-03-30T16:15:40 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:40 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:15:45 UTC" duration-ms="4821" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Category as Cooling-Datacenter & Offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=category=Cooling - Datacenter&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:45 UTC" name="teardown" finished-at="2023-03-30T16:15:45 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:45 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:15:49 UTC" duration-ms="4093" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Site as DFW10 ,Status as New &requestType as Facilities Request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=New&requestType=Facilities Request, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:49 UTC" name="teardown" finished-at="2023-03-30T16:15:49 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:49 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:15:54 UTC" duration-ms="5371" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Site as DFW10 ,Status as New&Category as Parking, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&site=PHX015&category=Parking, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:54 UTC" name="teardown" finished-at="2023-03-30T16:15:54 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:54 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:15:59 UTC" duration-ms="4816" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Site DFW10 ,Status as New, requestType as Amenities,Limit as 30 & offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=size=30&status=New&page=20&site=PHX015&requestType=Amenities, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:59 UTC" name="teardown" finished-at="2023-03-30T16:15:59 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:15:59 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:16:03 UTC" duration-ms="4418" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Site as DFW10,Status as New,requestType as Accounts Receivable&category as General Billing Inquiry, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&site=PHX015&category=General Billing Inquiry&requestType=Accounts Receivable, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:16:03 UTC" name="teardown" finished-at="2023-03-30T16:16:03 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:16:03 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:16:07 UTC" duration-ms="3470" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Site as DFW10,Status as New,requestType as Account Management, Category as User Account Inquiry,Limit as 30 &offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Account Management&category=User Account Inquiry&size=2&status=New&page=0&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:16:07 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:16:10 UTC" duration-ms="3497" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Site as DFW10,Status as New,requestType as Account Management, Category as Loading Dock,Limit as 30 &offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Amenities&category=Loading Dock&size=2&status=New&page=0&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:16:07 UTC" name="teardown" finished-at="2023-03-30T16:16:07 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:16:10 UTC" name="teardown" finished-at="2023-03-30T16:16:10 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:16:10 UTC" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-03-30T16:16:14 UTC" duration-ms="3900" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Site as DFW10,Status as New,requestType as Account Management, Category as User Account Inquiry,Limit as 30 &offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request&category=Planned Maintenance&size=2&status=New&page=0&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2]" started-at="2023-03-30T16:16:14 UTC" name="teardown" finished-at="2023-03-30T16:16:14 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@52e7a6b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetCustomerSupportTicketDetails -->
      <class name="com.gapi.testCases.TerminatePermanentBadgeRequest">
        <test-method signature="verifyTerminatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@658c5a19]" started-at="2023-03-30T16:22:21 UTC" name="verifyTerminatePermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-03-30T16:22:25 UTC" duration-ms="3977" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate Perm Badge Ticket Terminate, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyTerminatePermanentBadgeRequest, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTerminatePermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@658c5a19]" started-at="2023-03-30T16:22:25 UTC" name="teardown" finished-at="2023-03-30T16:22:25 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTerminatePermanentBadgeRequest status=SUCCESS method=TerminatePermanentBadgeRequest.verifyTerminatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.TerminatePermanentBadgeRequest -->
      <class name="com.gapi.testCases.GetRemoteHandsTicketDetails">
        <test-method signature="getAllRemoteHandsTicketsInfo()[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:09 UTC" name="getAllRemoteHandsTicketsInfo" finished-at="2023-03-30T16:09:13 UTC" duration-ms="4125" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllRemoteHandsTicketsInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:13 UTC" name="teardown" finished-at="2023-03-30T16:09:13 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllRemoteHandsTicketsInfo status=SUCCESS method=GetRemoteHandsTicketDetails.getAllRemoteHandsTicketsInfo()[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCategoryListForRemoteHandsRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:13 UTC" name="getCategoryListForRemoteHandsRequestType" data-provider="testCasesData" finished-at="2023-03-30T16:09:13 UTC" duration-ms="299" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Retrieve Category list for Planned Work Request Type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=requestType=Planned Work, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCategoryListForRemoteHandsRequestType, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCategoryListForRemoteHandsRequestType -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:13 UTC" name="teardown" finished-at="2023-03-30T16:09:13 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCategoryListForRemoteHandsRequestType status=SUCCESS method=GetRemoteHandsTicketDetails.getCategoryListForRemoteHandsRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCategoryListForRemoteHandsRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:13 UTC" name="getCategoryListForRemoteHandsRequestType" data-provider="testCasesData" finished-at="2023-03-30T16:09:14 UTC" duration-ms="287" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Retrieve Category list for Urgent Work Request Type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=requestType=Urgent Work, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCategoryListForRemoteHandsRequestType, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCategoryListForRemoteHandsRequestType -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:14 UTC" name="teardown" finished-at="2023-03-30T16:09:14 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCategoryListForRemoteHandsRequestType status=SUCCESS method=GetRemoteHandsTicketDetails.getCategoryListForRemoteHandsRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCategoryListForRemoteHandsRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:14 UTC" name="getCategoryListForRemoteHandsRequestType" data-provider="testCasesData" finished-at="2023-03-30T16:09:14 UTC" duration-ms="265" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Retrieve Category list for Invalid RequestType , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=requestType=Urgent Wor, expectedStatusCode=400, ci=, readFlag=, errorMessage=Request is invalid., methodName=getCategoryListForRemoteHandsRequestType, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCategoryListForRemoteHandsRequestType -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:14 UTC" name="teardown" finished-at="2023-03-30T16:09:14 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCategoryListForRemoteHandsRequestType status=SUCCESS method=GetRemoteHandsTicketDetails.getCategoryListForRemoteHandsRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:14 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:16 UTC" duration-ms="1725" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Retrieve the Remote hands details by filtering with Site name, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:16 UTC" name="teardown" finished-at="2023-03-30T16:09:16 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:16 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:18 UTC" duration-ms="2305" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Status as New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:18 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:19 UTC" duration-ms="849" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Status as InProgress, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=In Progress, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:18 UTC" name="teardown" finished-at="2023-03-30T16:09:18 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:19 UTC" name="teardown" finished-at="2023-03-30T16:09:19 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:19 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:20 UTC" duration-ms="1147" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Status as Completed, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=Completed, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:20 UTC" name="teardown" finished-at="2023-03-30T16:09:20 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:20 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:22 UTC" duration-ms="1663" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Status as Cancelled, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=Cancellation Requested, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:22 UTC" name="teardown" finished-at="2023-03-30T16:09:22 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:22 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:24 UTC" duration-ms="2256" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Remote Hands Requests by Status - Cancellation Requested, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=Cancellation Requested, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:24 UTC" name="teardown" finished-at="2023-03-30T16:09:24 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:24 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:26 UTC" duration-ms="1759" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the remote hands details by filtering with requestType as Planned Work, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&requestType=Planned Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:26 UTC" name="teardown" finished-at="2023-03-30T16:09:26 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:26 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:27 UTC" duration-ms="1716" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the remote hands details by filtering with requestType as Urgent Work, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&requestType=Urgent Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:27 UTC" name="teardown" finished-at="2023-03-30T16:09:27 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:27 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:30 UTC" duration-ms="2269" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the remote hands details by filtering with Category as Existing cross connect or connectivity testing, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&category=Existing cross connect or connectivity testing, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:30 UTC" name="teardown" finished-at="2023-03-30T16:09:30 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:30 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:32 UTC" duration-ms="2329" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All-Retrieve the remote hand details by filtering with Limit value as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&size=25, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:32 UTC" name="teardown" finished-at="2023-03-30T16:09:32 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:32 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:34 UTC" duration-ms="1717" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the remote hands details by filtering with Offset values as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:34 UTC" name="teardown" finished-at="2023-03-30T16:09:34 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:34 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:35 UTC" duration-ms="1694" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the remote hands details by filtering with site as PHX015 and Status as New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:35 UTC" name="teardown" finished-at="2023-03-30T16:09:35 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:35 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:37 UTC" duration-ms="1660" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the remote hands details by filtering with site as PHX015 and  CreatedBy as John Johnson, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&category=Auditing, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:37 UTC" name="teardown" finished-at="2023-03-30T16:09:37 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:37 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:39 UTC" duration-ms="2323" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with  Site as PHX015 and requestType as Planned Work, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&requestType=Planned Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:39 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:42 UTC" duration-ms="2262" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with  Site as PHX015 & Category as Equipment troubleshoot or replacement, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&category=Equipment troubleshoot or replacement, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:39 UTC" name="teardown" finished-at="2023-03-30T16:09:39 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:42 UTC" name="teardown" finished-at="2023-03-30T16:09:42 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:42 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:42 UTC" duration-ms="912" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with  Site as PHX015 & Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&size=6, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:42 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:45 UTC" duration-ms="2261" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with  Site  as PHX015 & offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:42 UTC" name="teardown" finished-at="2023-03-30T16:09:42 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:45 UTC" name="teardown" finished-at="2023-03-30T16:09:45 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:45 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:46 UTC" duration-ms="1574" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with  Status as NEW  & requestType Urgent Work, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&requestType=Urgent Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:46 UTC" name="teardown" finished-at="2023-03-30T16:09:46 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:46 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:48 UTC" duration-ms="1704" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with  Status as New & Category as  KVM (keyboard, video, mouse) assistance, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&category=KVM (keyboard, video, mouse) assistance, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:48 UTC" name="teardown" finished-at="2023-03-30T16:09:48 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:48 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:50 UTC" duration-ms="2302" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with  Status as New and CreatedBy as John Johnson, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&category=Tape swaps, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:50 UTC" name="teardown" finished-at="2023-03-30T16:09:50 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:50 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:53 UTC" duration-ms="2313" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with  Status as New and Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&size=25, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:53 UTC" name="teardown" finished-at="2023-03-30T16:09:53 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:53 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:55 UTC" duration-ms="2398" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with  Status as New and offset as 20, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&page=20, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:55 UTC" name="teardown" finished-at="2023-03-30T16:09:55 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:55 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:57 UTC" duration-ms="2304" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details  by filtering with requestType as Planned work and CreatedBy as John JohnSon, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:57 UTC" name="teardown" finished-at="2023-03-30T16:09:57 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:57 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:09:59 UTC" duration-ms="1894" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details  by filtering with requestType as Urgent work,Status as New and Size as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work&status=New&size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:59 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:10:01 UTC" duration-ms="2086" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with requestType as Urgent work and Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work&status=New&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:09:59 UTC" name="teardown" finished-at="2023-03-30T16:09:59 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:01 UTC" name="teardown" finished-at="2023-03-30T16:10:01 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:01 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:10:03 UTC" duration-ms="1731" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with requestType as Planned Work and Offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&page=0&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:03 UTC" name="teardown" finished-at="2023-03-30T16:10:03 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:03 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:10:05 UTC" duration-ms="1659" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Category as Power cycle or reboot & CreatedBy as John Johnson, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=category=Power cycle or reboot&status=New&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:05 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:10:06 UTC" duration-ms="1068" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details  by filtering with Category as Other& Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=category=Other&size=1&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:05 UTC" name="teardown" finished-at="2023-03-30T16:10:05 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:06 UTC" name="teardown" finished-at="2023-03-30T16:10:06 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:06 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:10:08 UTC" duration-ms="2335" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Category as Customer premise cabling & Offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=category=Customer premise cabling&page=0&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:08 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:10:10 UTC" duration-ms="2045" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site as PHX015 ,Status as New &requestType as Planned Work, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=New&requestType=Planned Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:08 UTC" name="teardown" finished-at="2023-03-30T16:10:08 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:10 UTC" name="teardown" finished-at="2023-03-30T16:10:10 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:10 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:10:13 UTC" duration-ms="3321" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site as PHX015 ,Status as New&Category as Tape swaps, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&site=PHX015&category=Tape swaps, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:211)
at jdk.internal.reflect.GeneratedMethodAccessor175.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:13 UTC" name="teardown" finished-at="2023-03-30T16:10:13 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SKIP method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:13 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:10:17 UTC" duration-ms="3587" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site as PHX015 ,Status as New&Category as Tape swaps, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&site=PHX015&category=Tape swaps, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:211)
at jdk.internal.reflect.GeneratedMethodAccessor175.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:17 UTC" name="teardown" finished-at="2023-03-30T16:10:17 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=FAILURE method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:17 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:10:21 UTC" duration-ms="3575" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site as PHX015 ,Status as New&createdBy as  John Johnson, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&site=PHX015&category=Auditing, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:211)
at jdk.internal.reflect.GeneratedMethodAccessor175.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:21 UTC" name="teardown" finished-at="2023-03-30T16:10:21 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SKIP method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:21 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:10:23 UTC" duration-ms="1990" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site as PHX015 ,Status as New&createdBy as  John Johnson, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&site=PHX015&category=Auditing, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:23 UTC" name="teardown" finished-at="2023-03-30T16:10:23 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:23 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:10:25 UTC" duration-ms="2381" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site PHX015 ,Status as New, requestType as Planned Work,Limit as 30 & offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=size=25&status=New&page=0&site=PHX015&requestType=Planned Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:25 UTC" name="teardown" finished-at="2023-03-30T16:10:25 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:25 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:10:27 UTC" duration-ms="1740" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site as PHX015,Status as New,requestType as Planned Work&category as Equipment installation, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&site=PHX015&category=Existing cross connect or connectivity testing&requestType=Urgent Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:27 UTC" name="teardown" finished-at="2023-03-30T16:10:27 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:27 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:10:28 UTC" duration-ms="1722" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site as PHX015,Status as New,requestType as Urgent Work &createdBy as John JohnSon, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&site=PHX015&requestType=Urgent Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:28 UTC" name="teardown" finished-at="2023-03-30T16:10:28 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:28 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:10:30 UTC" duration-ms="1624" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site as PHX015,Status as New,requestType as Planned Work, Category as Equipment de-installation,Limit as 30 &offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=size=25&status=New&page=0&site=PHX015&category=Equipment de-installation&requestType=Planned Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:30 UTC" name="teardown" finished-at="2023-03-30T16:10:30 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:30 UTC" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-03-30T16:10:32 UTC" duration-ms="2026" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site as PHX015,Status as New,requestType as Planned Work,category as Dedicated escort,createdBy as John JohnSon,Limit as 30&Offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, errorMessageType=, standardVisitorBadgeStr=, filters=size=30&status=New&page=0&site=PHX015&category=Dedicated escort&requestType=Planned Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:32 UTC" name="teardown" finished-at="2023-03-30T16:10:32 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetRemoteHandsTicketInfoByInvalidId()[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:32 UTC" name="verifyGetRemoteHandsTicketInfoByInvalidId" finished-at="2023-03-30T16:10:33 UTC" duration-ms="422" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetRemoteHandsTicketInfoByInvalidId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640]" started-at="2023-03-30T16:10:33 UTC" name="teardown" finished-at="2023-03-30T16:10:33 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetRemoteHandsTicketInfoByInvalidId status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetRemoteHandsTicketInfoByInvalidId()[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetRemoteHandsTicketDetails -->
      <class name="com.gapi.testCases.GetAssets">
        <test-method signature="getAllAssetsInfo()[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac]" started-at="2023-03-30T16:19:48 UTC" name="getAllAssetsInfo" finished-at="2023-03-30T16:19:49 UTC" duration-ms="701" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac]" started-at="2023-03-30T16:19:49 UTC" name="teardown" finished-at="2023-03-30T16:19:49 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInfo status=SUCCESS method=GetAssets.getAllAssetsInfo()[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAssetInfoById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac]" started-at="2023-03-30T16:19:49 UTC" name="getAssetInfoById" data-provider="testCasesData" finished-at="2023-03-30T16:19:50 UTC" duration-ms="654" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify API user is able to retrieve the asset details by asset id, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAssetInfoById, errorMessageType=, standardVisitorBadgeStr=, filters=?id=2ca74e8713123600a501b7a66144b0f4, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAssetInfoById -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac]" started-at="2023-03-30T16:19:50 UTC" name="teardown" finished-at="2023-03-30T16:19:50 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAssetInfoById status=SUCCESS method=GetAssets.getAssetInfoById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac]" started-at="2023-03-30T16:19:50 UTC" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-03-30T16:19:50 UTC" duration-ms="508" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify if API user is able to retrieve the location details with filters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dmMWaQAM&site=PHX015&type=room, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac]" started-at="2023-03-30T16:19:50 UTC" name="teardown" finished-at="2023-03-30T16:19:50 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetAssets.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac]" started-at="2023-03-30T16:19:50 UTC" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-03-30T16:19:51 UTC" duration-ms="458" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer using Valid account id and Invalid Site Code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dmMWaQAM&site=123, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac]" started-at="2023-03-30T16:19:51 UTC" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-03-30T16:19:51 UTC" duration-ms="466" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer using Invalid account id and valid Site Code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=abc&site=PHX015&type=room , visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac]" started-at="2023-03-30T16:19:51 UTC" name="teardown" finished-at="2023-03-30T16:19:51 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetAssets.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac]" started-at="2023-03-30T16:19:51 UTC" name="teardown" finished-at="2023-03-30T16:19:51 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetAssets.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac]" started-at="2023-03-30T16:19:51 UTC" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-03-30T16:19:52 UTC" duration-ms="564" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer using Valid account id &Site Code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, errorMessageType=, standardVisitorBadgeStr=, filters=site=IAD024&accountId=0012E00002dmMWaQAM, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac]" started-at="2023-03-30T16:19:52 UTC" name="teardown" finished-at="2023-03-30T16:19:52 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetAssets.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac]" started-at="2023-03-30T16:19:52 UTC" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-03-30T16:19:53 UTC" duration-ms="823" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer using account id,Site Code&Type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, errorMessageType=, standardVisitorBadgeStr=, filters=site=IAD024&accountId=0012E00002dmMWaQAM&type=datacenter, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac]" started-at="2023-03-30T16:19:53 UTC" name="teardown" finished-at="2023-03-30T16:19:53 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetAssets.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyAssetNames(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac]" started-at="2023-03-30T16:19:53 UTC" name="verifyAssetNames" data-provider="testCasesData" finished-at="2023-03-30T16:19:53 UTC" duration-ms="390" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify API user should be able to retrieve the Asset Name for the given Asset Id, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=0121f90f13def200a501b7a66144b050, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAssetNames, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=POP C003 Zayo Group, LLC, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAssetNames -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac]" started-at="2023-03-30T16:19:53 UTC" name="teardown" finished-at="2023-03-30T16:19:53 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAssetNames status=SUCCESS method=GetAssets.verifyAssetNames(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@4b5189ac] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetAssets -->
      <class name="com.gapi.testCases.UsersRBAC">
        <test-method signature="createUserdetailsRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:16 UTC" name="createUserdetailsRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:17 UTC" duration-ms="771" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=New User Creation using  Phone optional parmaters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test3, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=Director of Marketing, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=portal154, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=createUserdetailsRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUserdetailsRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:17 UTC" name="teardown" finished-at="2023-03-30T16:25:17 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createUserdetailsRBAC status=SUCCESS method=UsersRBAC.createUserdetailsRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createUserdetailsRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:17 UTC" name="createUserdetailsRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:18 UTC" duration-ms="423" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=New User Creation without Last name mandatory parametrs, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test3, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=Director of Marketing, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=createUserdetailsRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUserdetailsRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:18 UTC" name="teardown" finished-at="2023-03-30T16:25:18 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createUserdetailsRBAC status=SUCCESS method=UsersRBAC.createUserdetailsRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createUserwithoutmandatoryparametersRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:18 UTC" name="createUserwithoutmandatoryparametersRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:18 UTC" duration-ms="421" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=New User Creation without Email mandatory parametrs, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test2, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=Director of Marketing, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=portal153, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=createUserwithoutmandatoryparametersRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUserwithoutmandatoryparametersRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:18 UTC" name="teardown" finished-at="2023-03-30T16:25:18 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createUserwithoutmandatoryparametersRBAC status=SUCCESS method=UsersRBAC.createUserwithoutmandatoryparametersRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createUserwithoutmandatoryparametersRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:18 UTC" name="createUserwithoutmandatoryparametersRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:18 UTC" duration-ms="429" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=New User Creation - Existing, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test3, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=Director of Marketing, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=portal154, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=portal153@gmail.com, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=createUserwithoutmandatoryparametersRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUserwithoutmandatoryparametersRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:18 UTC" name="teardown" finished-at="2023-03-30T16:25:18 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createUserwithoutmandatoryparametersRBAC status=SUCCESS method=UsersRBAC.createUserwithoutmandatoryparametersRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getUserdetailsRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:18 UTC" name="getUserdetailsRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:19 UTC" duration-ms="759" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve user details by UserID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getUserdetailsRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=1b57781e-2a48-4d4f-a1e8-179f4ca538b8, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUserdetailsRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:19 UTC" name="teardown" finished-at="2023-03-30T16:25:19 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getUserdetailsRBAC status=SUCCESS method=UsersRBAC.getUserdetailsRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getUserdetailsRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:19 UTC" name="getUserdetailsRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:20 UTC" duration-ms="379" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve user details by Invalid UserID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=getUserdetailsRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=1b57781e-2a48-4d4f-a1e8-179f4ca538b82, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUserdetailsRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:20 UTC" name="teardown" finished-at="2023-03-30T16:25:20 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getUserdetailsRBAC status=SUCCESS method=UsersRBAC.getUserdetailsRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfoRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:20 UTC" name="getallRolesinfoRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:20 UTC" duration-ms="565" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Get Role Details by Role ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=cefe9a60-79d4-4f95-a323-3fcf4fe3f7b6, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getallRolesinfoRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfoRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:20 UTC" name="teardown" finished-at="2023-03-30T16:25:20 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfoRBAC status=SUCCESS method=UsersRBAC.getallRolesinfoRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfoRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:20 UTC" name="getallRolesinfoRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:21 UTC" duration-ms="581" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Get Roles For Customer Account, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=cefe9a60-79d4-4f95-a323-3fcf4fe3f7b6, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getallRolesinfoRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfoRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:21 UTC" name="teardown" finished-at="2023-03-30T16:25:21 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfoRBAC status=SUCCESS method=UsersRBAC.getallRolesinfoRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfoRBACinvalid(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:21 UTC" name="getallRolesinfoRBACinvalid" data-provider="testCasesData" finished-at="2023-03-30T16:25:21 UTC" duration-ms="361" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Get Role Details by Invalid Role ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=cefe9a60-79d4-4f95-a323-3fcf4fe3f7b61, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=getallRolesinfoRBACinvalid, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfoRBACinvalid -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:21 UTC" name="teardown" finished-at="2023-03-30T16:25:21 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfoRBACinvalid status=SUCCESS method=UsersRBAC.getallRolesinfoRBACinvalid(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="multipleAssetsAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:21 UTC" name="multipleAssetsAssociationRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:23 UTC" duration-ms="1566" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Assign a user with multiple Asset id's, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=a4a74e8713123600a501b7a66144b0f4, billingAccountNumber=, assetId1=2ca74e8713123600a501b7a66144b0f4, assetId4=a4a74e8713123600a501b7a66144b0f4, accessEndDate=, assetId3=91aa7e54132e7600a501b7a66144b036, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=multipleAssetsAssociationRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multipleAssetsAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:23 UTC" name="teardown" finished-at="2023-03-30T16:25:23 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=multipleAssetsAssociationRBAC status=SUCCESS method=UsersRBAC.multipleAssetsAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="multipleAssetsAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:23 UTC" name="multipleAssetsAssociationRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:24 UTC" duration-ms="1374" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Assign a user with a single Asset id's, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=91aa7e54132e7600a501b7a66144b036, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=multipleAssetsAssociationRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multipleAssetsAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:24 UTC" name="teardown" finished-at="2023-03-30T16:25:24 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=multipleAssetsAssociationRBAC status=SUCCESS method=UsersRBAC.multipleAssetsAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="retrieveUserAccountAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:24 UTC" name="retrieveUserAccountAssociationRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:25 UTC" duration-ms="779" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve list of Associations of user by ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=retrieveUserAccountAssociationRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveUserAccountAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:25 UTC" name="teardown" finished-at="2023-03-30T16:25:25 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=retrieveUserAccountAssociationRBAC status=SUCCESS method=UsersRBAC.retrieveUserAccountAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="retrieveUsercommentsRemoteHandsTicketRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:25 UTC" name="retrieveUsercommentsRemoteHandsTicketRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:27 UTC" duration-ms="2231" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Commented By -User name, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=retrieveUsercommentsRemoteHandsTicketRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveUsercommentsRemoteHandsTicketRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:27 UTC" name="teardown" finished-at="2023-03-30T16:25:27 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=retrieveUsercommentsRemoteHandsTicketRBAC status=SUCCESS method=UsersRBAC.retrieveUsercommentsRemoteHandsTicketRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:27 UTC" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:28 UTC" duration-ms="1266" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Assign a User with  one country and one single city in another country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=city=Chandler, billingAccountNumber=, assetId1=country=United%20States, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:28 UTC" name="teardown" finished-at="2023-03-30T16:25:28 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:28 UTC" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:30 UTC" duration-ms="1176" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Assign a User with  only one Site, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=site=PHX015, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:30 UTC" name="teardown" finished-at="2023-03-30T16:25:30 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:30 UTC" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:31 UTC" duration-ms="1160" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Assign a User with  two Sites, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=site=PHX015, billingAccountNumber=, assetId1=site=IAD024, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:31 UTC" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:32 UTC" duration-ms="1208" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Assign a User with  one city Atlanta and one site in another city, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=site=PHX015, billingAccountNumber=, assetId1=city=Ashburn, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:31 UTC" name="teardown" finished-at="2023-03-30T16:25:31 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:32 UTC" name="teardown" finished-at="2023-03-30T16:25:32 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:32 UTC" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:33 UTC" duration-ms="1148" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Assign a User with  one region and one single country in another region, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=region=North%20America, billingAccountNumber=, assetId1=country=United%20States, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:33 UTC" name="teardown" finished-at="2023-03-30T16:25:33 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:33 UTC" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:34 UTC" duration-ms="1156" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Assign a user with all the sites present in two cities, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=city=Ashburn, billingAccountNumber=, assetId1=city=Chandler, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:34 UTC" name="teardown" finished-at="2023-03-30T16:25:34 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:34 UTC" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:35 UTC" duration-ms="1155" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Assign a user with all the sites present in a city, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=city=Ashburn, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:35 UTC" name="teardown" finished-at="2023-03-30T16:25:35 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:35 UTC" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:37 UTC" duration-ms="1158" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Assign a user with all the sites present in two countries, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=country=United%20States, billingAccountNumber=, assetId1=country=United%20States, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:37 UTC" name="teardown" finished-at="2023-03-30T16:25:37 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:37 UTC" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:38 UTC" duration-ms="1213" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Assign a user with all the sites present in a country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=country=United%20States, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:38 UTC" name="teardown" finished-at="2023-03-30T16:25:38 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:38 UTC" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:39 UTC" duration-ms="1170" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Assign a user with all the sites present in two regions, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=region=North%20America, billingAccountNumber=, assetId1=region=North%20America, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:39 UTC" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:40 UTC" duration-ms="1137" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Assign a user with all the sites present in one region, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=region=North%20America, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:39 UTC" name="teardown" finished-at="2023-03-30T16:25:39 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:40 UTC" name="teardown" finished-at="2023-03-30T16:25:40 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="userAccountAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:40 UTC" name="userAccountAssociationRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:41 UTC" duration-ms="1249" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Assign a user with one asset id in one country  and another Asset id in another country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=91aa7e54132e7600a501b7a66144b036, billingAccountNumber=, assetId1=2ca74e8713123600a501b7a66144b0f4, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=userAccountAssociationRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userAccountAssociationRBAC -->
        <test-method signature="userAccountAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:41 UTC" name="userAccountAssociationRBAC" data-provider="testCasesData" finished-at="2023-03-30T16:25:43 UTC" duration-ms="1216" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Assign a user with one asset id in one city and another Asset id in another city, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=a4a74e8713123600a501b7a66144b0f4, billingAccountNumber=, assetId1=2ca74e8713123600a501b7a66144b0f4, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=userAccountAssociationRBAC, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userAccountAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:41 UTC" name="teardown" finished-at="2023-03-30T16:25:41 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=userAccountAssociationRBAC status=SUCCESS method=UsersRBAC.userAccountAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88]" started-at="2023-03-30T16:25:43 UTC" name="teardown" finished-at="2023-03-30T16:25:43 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=userAccountAssociationRBAC status=SUCCESS method=UsersRBAC.userAccountAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@57c03d88] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.UsersRBAC -->
      <class name="com.gapi.testCases.CancelRemoteHandsTicket">
        <test-method signature="verifyCancelRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelRemoteHandsTicket@14008db3]" started-at="2023-03-30T16:24:53 UTC" name="verifyCancelRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:24:57 UTC" duration-ms="4165" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Cancel Remote Hands Ticket in New Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCancelRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelRemoteHandsTicket@14008db3]" started-at="2023-03-30T16:24:57 UTC" name="teardown" finished-at="2023-03-30T16:24:57 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelRemoteHandsTicket status=SUCCESS method=CancelRemoteHandsTicket.verifyCancelRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelRemoteHandsTicket@14008db3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCancelRemoteHandsTicketwithoutID(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelRemoteHandsTicket@14008db3]" started-at="2023-03-30T16:24:57 UTC" name="verifyCancelRemoteHandsTicketwithoutID" data-provider="testCasesData" finished-at="2023-03-30T16:24:58 UTC" duration-ms="422" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Cancel Remote Hands ticket without specifying Mandatory fields ID and/or Cancel Reason, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=404, ci=, readFlag=, errorMessage=Resource not found., methodName=verifyCancelRemoteHandsTicketwithoutID, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelRemoteHandsTicketwithoutID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelRemoteHandsTicket@14008db3]" started-at="2023-03-30T16:24:58 UTC" name="teardown" finished-at="2023-03-30T16:24:58 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelRemoteHandsTicketwithoutID status=SUCCESS method=CancelRemoteHandsTicket.verifyCancelRemoteHandsTicketwithoutID(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelRemoteHandsTicket@14008db3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CancelRemoteHandsTicket -->
      <class name="com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket">
        <test-method signature="addAttachmentstoCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@58594a11]" started-at="2023-03-30T16:27:36 UTC" name="addAttachmentstoCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-03-30T16:27:41 UTC" duration-ms="4523" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Adding Attachment to Existing Customer Support Request - with Various file types/formats, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=addAttachmentstoCustomerSupportTicket, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=sampleattachment.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addAttachmentstoCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@58594a11]" started-at="2023-03-30T16:27:41 UTC" name="teardown" finished-at="2023-03-30T16:27:41 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addAttachmentstoCustomerSupportTicket status=SUCCESS method=AddAttachmentToTheCustomerSupportTicket.addAttachmentstoCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@58594a11]" started-at="2023-03-30T16:27:41 UTC" name="addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename" data-provider="testCasesData" finished-at="2023-03-30T16:27:42 UTC" duration-ms="1492" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Adding Attachment to Existing Customer Support Request - without mandatory fields RequestID and filename, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name= &requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@58594a11]" started-at="2023-03-30T16:27:42 UTC" name="teardown" finished-at="2023-03-30T16:27:42 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename status=SUCCESS method=AddAttachmentToTheCustomerSupportTicket.addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAttachmentOfCustomerSupportTicketByID(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@58594a11]" started-at="2023-03-30T16:27:42 UTC" name="getAttachmentOfCustomerSupportTicketByID" data-provider="testCasesData" finished-at="2023-03-30T16:27:52 UTC" duration-ms="9930" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Get a single Attachment related to a Customer Support ticket (by attachment ID), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAttachmentOfCustomerSupportTicketByID, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=test&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Electrical, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAttachmentOfCustomerSupportTicketByID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@58594a11]" started-at="2023-03-30T16:27:52 UTC" name="teardown" finished-at="2023-03-30T16:27:52 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAttachmentOfCustomerSupportTicketByID status=SUCCESS method=AddAttachmentToTheCustomerSupportTicket.getAttachmentOfCustomerSupportTicketByID(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket -->
      <class name="com.gapi.testCases.CreateRemoteHandsTicket">
        <test-method signature="createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:04:33 UTC" name="createRemoteHandsTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-03-30T16:04:51 UTC" duration-ms="17703" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Remote Hands Ticket  End to End flow with Request type and Category as Planned work and Existing cross connect or connectivity testing, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createRemoteHandsTicketAndVerifyEndToEndFlow, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createRemoteHandsTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:04:51 UTC" name="teardown" finished-at="2023-03-30T16:04:51 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createRemoteHandsTicketAndVerifyEndToEndFlow status=SUCCESS method=CreateRemoteHandsTicket.createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:04:51 UTC" name="createRemoteHandsTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-03-30T16:05:06 UTC" duration-ms="15528" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Remote Hands Request End to End flow with Request type and Category as Planned work and Dedicated escort, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createRemoteHandsTicketAndVerifyEndToEndFlow, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Dedicated escort, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createRemoteHandsTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:05:06 UTC" name="teardown" finished-at="2023-03-30T16:05:06 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createRemoteHandsTicketAndVerifyEndToEndFlow status=SUCCESS method=CreateRemoteHandsTicket.createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:05:06 UTC" name="createRemoteHandsTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-03-30T16:05:23 UTC" duration-ms="16596" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Remote Hands End to End flow With  Ticket with Request Type as Urgent Work and Category as Power Cycle or reboot, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createRemoteHandsTicketAndVerifyEndToEndFlow, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createRemoteHandsTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:05:23 UTC" name="teardown" finished-at="2023-03-30T16:05:23 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createRemoteHandsTicketAndVerifyEndToEndFlow status=SUCCESS method=CreateRemoteHandsTicket.createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createRemoteHandsTicketwithNotificationRecipient(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:05:23 UTC" name="createRemoteHandsTicketwithNotificationRecipient" data-provider="testCasesData" finished-at="2023-03-30T16:05:23 UTC" duration-ms="295" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Submit a RH Request - with invalid Notification Recipient email format, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=Request no longer needed, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=400, ci=, readFlag=, errorMessage=Payload 'notificationRecipients' has an invalid email., methodName=createRemoteHandsTicketwithNotificationRecipient, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createRemoteHandsTicketwithNotificationRecipient -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:05:23 UTC" name="teardown" finished-at="2023-03-30T16:05:23 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createRemoteHandsTicketwithNotificationRecipient status=SUCCESS method=CreateRemoteHandsTicket.createRemoteHandsTicketwithNotificationRecipient(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createRemoteHandsTicketwithNotificationRecipient(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:05:23 UTC" name="createRemoteHandsTicketwithNotificationRecipient" data-provider="testCasesData" finished-at="2023-03-30T16:05:30 UTC" duration-ms="6591" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Submit a RH Request - with multiple Notification Recipients (comma separated email addresses), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=gpuat22-51@yahoo.com,jane_doe@email.com,Testuser@test.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=Request no longer needed, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createRemoteHandsTicketwithNotificationRecipient, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createRemoteHandsTicketwithNotificationRecipient -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:05:30 UTC" name="teardown" finished-at="2023-03-30T16:05:30 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createRemoteHandsTicketwithNotificationRecipient status=SUCCESS method=CreateRemoteHandsTicket.createRemoteHandsTicketwithNotificationRecipient(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRHTicketForInvalidUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:05:30 UTC" name="verifyCreateRHTicketForInvalidUser" data-provider="testCasesData" finished-at="2023-03-30T16:05:30 UTC" duration-ms="209" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket with Invalid user RBAC, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=title sample, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyCreateRHTicketForInvalidUser, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Customer premise cabling, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRHTicketForInvalidUser -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:05:30 UTC" name="teardown" finished-at="2023-03-30T16:05:30 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRHTicketForInvalidUser status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRHTicketForInvalidUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:05:30 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:05:41 UTC" duration-ms="11193" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket With Request Type as Planned Work and category as Existing cross connect or connectivity testing, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:05:41 UTC" name="teardown" finished-at="2023-03-30T16:05:41 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:05:41 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:05:53 UTC" duration-ms="11976" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket  With Request Type as Planned Work and Category as Dedicated escort, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Dedicated escort, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:05:53 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:06:05 UTC" duration-ms="11718" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket With Request Type as Planned Work and  Category as Customer premise cabling, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=Rfer09876545, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=qa_sampleTesting@Yahoo.in, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Customer premise cabling, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:05:53 UTC" name="teardown" finished-at="2023-03-30T16:05:53 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:06:05 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:06:17 UTC" duration-ms="12065" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket With RequestType as Planned  Work and Category as Auditing, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Auditing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:06:05 UTC" name="teardown" finished-at="2023-03-30T16:06:05 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:06:17 UTC" name="teardown" finished-at="2023-03-30T16:06:17 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:06:17 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:06:28 UTC" duration-ms="11141" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket with Request Type as Planned Work and Category as Tape swaps, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF097654677, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=sample@gmail.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO000987, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Tape swaps, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:06:28 UTC" name="teardown" finished-at="2023-03-30T16:06:28 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:06:28 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:06:39 UTC" duration-ms="10993" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket with Request Type as Planned Work and Category as Equipment de-installation, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Equipment de-installation, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:06:39 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:06:51 UTC" duration-ms="11825" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket with Request Type as Planned Work and Category as Equipment installation, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Equipment installation, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:06:39 UTC" name="teardown" finished-at="2023-03-30T16:06:39 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:06:51 UTC" name="teardown" finished-at="2023-03-30T16:06:51 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:06:51 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:07:03 UTC" duration-ms="11684" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket with Request Type as Planned Work and Category as Other, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Other, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:07:03 UTC" name="teardown" finished-at="2023-03-30T16:07:03 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:07:03 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:07:14 UTC" duration-ms="11014" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Request With RequestType as Urgent Work and Category as Existing cross connect or connectivity testing, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:07:14 UTC" name="teardown" finished-at="2023-03-30T16:07:14 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:07:14 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:07:25 UTC" duration-ms="11688" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Request With RequestType asUrgent Work and Category as Equipment troubleshoot or replacement, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01456788, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=testingsample_testing@yahoo.in, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO58725788, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Equipment troubleshoot or replacement, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:07:25 UTC" name="teardown" finished-at="2023-03-30T16:07:25 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:07:25 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:07:36 UTC" duration-ms="11126" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Request With RequestType as Urgent Work and Category as KVM (keyboard, video, mouse) assistance, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=KVM (keyboard, video, mouse) assistance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:07:36 UTC" name="teardown" finished-at="2023-03-30T16:07:36 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:07:36 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:07:48 UTC" duration-ms="11273" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket With RequestType as Urgent Work and Category as Power cycle or reboot, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:07:48 UTC" name="teardown" finished-at="2023-03-30T16:07:48 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:07:48 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:07:59 UTC" duration-ms="11774" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket with Request Type as Urgent Work and Category as Other, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Other, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:07:59 UTC" name="teardown" finished-at="2023-03-30T16:07:59 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:07:59 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:08:00 UTC" duration-ms="273" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Create Remote Hands Ticket with Request Type as Planned Work but Without Category , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=400, ci=, readFlag=, errorMessage=Payload 'category' has an unexpected value for the given 'requestType', methodName=verifyCreateRemoteHandsTicket, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category="", visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:08:00 UTC" name="teardown" finished-at="2023-03-30T16:08:00 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:08:00 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:08:00 UTC" duration-ms="275" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Create Remote Hands Ticket with Request Type as Urgent Work but Without Category , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=400, ci=, readFlag=, errorMessage=Payload 'category' has an unexpected value for the given 'requestType', methodName=verifyCreateRemoteHandsTicket, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category="", visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:08:00 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:08:11 UTC" duration-ms="11178" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket with only Mandatory Parameters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:08:00 UTC" name="teardown" finished-at="2023-03-30T16:08:00 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:08:11 UTC" name="teardown" finished-at="2023-03-30T16:08:11 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:08:11 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:08:23 UTC" duration-ms="11491" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket With Location Optional Parameter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=Other, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:08:23 UTC" name="teardown" finished-at="2023-03-30T16:08:23 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:08:23 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:08:34 UTC" duration-ms="11179" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket With Customer Reference Optional Parameter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:08:34 UTC" name="teardown" finished-at="2023-03-30T16:08:34 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:08:34 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:08:45 UTC" duration-ms="11635" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket with One Notification Recipient Optional Parameter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:08:45 UTC" name="teardown" finished-at="2023-03-30T16:08:45 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:08:45 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:08:57 UTC" duration-ms="11668" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket with Multiple Notification Recipient Optional Parameter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com,jake_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Customer premise cabling, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:08:57 UTC" name="teardown" finished-at="2023-03-30T16:08:57 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:08:57 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:08:58 UTC" duration-ms="390" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket with Invalid Email Format In Notification Recipient , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jan_test, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=400, ci=, readFlag=, errorMessage=Payload 'notificationRecipients' has an invalid email., methodName=verifyCreateRemoteHandsTicket, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Customer premise cabling, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:08:58 UTC" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:09:09 UTC" duration-ms="11333" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket With Reference Ticket Optional Parameter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=Customer premise cabling, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:08:58 UTC" name="teardown" finished-at="2023-03-30T16:08:58 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b]" started-at="2023-03-30T16:09:09 UTC" name="teardown" finished-at="2023-03-30T16:09:09 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@7fc4780b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreateRemoteHandsTicket -->
      <class name="com.gapi.testCases.GetPOPPOEDetails">
        <test-method signature="getPopDetailsInfo()[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@2b9ed6da]" started-at="2023-03-30T16:22:10 UTC" name="getPopDetailsInfo" finished-at="2023-03-30T16:22:15 UTC" duration-ms="5175" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPopDetailsInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@2b9ed6da]" started-at="2023-03-30T16:22:15 UTC" name="teardown" finished-at="2023-03-30T16:22:15 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPopDetailsInfo status=SUCCESS method=GetPOPPOEDetails.getPopDetailsInfo()[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@2b9ed6da] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getPopDetailsInfoWithInvalidGlobalUltimate()[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@2b9ed6da]" started-at="2023-03-30T16:22:15 UTC" name="getPopDetailsInfoWithInvalidGlobalUltimate" finished-at="2023-03-30T16:22:15 UTC" duration-ms="402" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPopDetailsInfoWithInvalidGlobalUltimate -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@2b9ed6da]" started-at="2023-03-30T16:22:15 UTC" name="teardown" finished-at="2023-03-30T16:22:15 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPopDetailsInfoWithInvalidGlobalUltimate status=SUCCESS method=GetPOPPOEDetails.getPopDetailsInfoWithInvalidGlobalUltimate()[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@2b9ed6da] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getPopDetailsInfoWithInvalidLegalentity()[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@2b9ed6da]" started-at="2023-03-30T16:22:15 UTC" name="getPopDetailsInfoWithInvalidLegalentity" finished-at="2023-03-30T16:22:16 UTC" duration-ms="432" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPopDetailsInfoWithInvalidLegalentity -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@2b9ed6da]" started-at="2023-03-30T16:22:16 UTC" name="teardown" finished-at="2023-03-30T16:22:16 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPopDetailsInfoWithInvalidLegalentity status=SUCCESS method=GetPOPPOEDetails.getPopDetailsInfoWithInvalidLegalentity()[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@2b9ed6da] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getPopDetailsInfoWithInvalidToken()[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@2b9ed6da]" started-at="2023-03-30T16:22:16 UTC" name="getPopDetailsInfoWithInvalidToken" finished-at="2023-03-30T16:22:16 UTC" duration-ms="197" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPopDetailsInfoWithInvalidToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@2b9ed6da]" started-at="2023-03-30T16:22:16 UTC" name="teardown" finished-at="2023-03-30T16:22:16 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPopDetailsInfoWithInvalidToken status=SUCCESS method=GetPOPPOEDetails.getPopDetailsInfoWithInvalidToken()[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@2b9ed6da] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetPOPPOEDetails -->
      <class name="com.gapi.testCases.GetRegions">
        <test-method signature="getRegionsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRegions@3ddc6915]" started-at="2023-03-30T16:20:16 UTC" name="getRegionsInformation" data-provider="testCasesData" finished-at="2023-03-30T16:20:17 UTC" duration-ms="690" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate if the Response has Regions field in addition to the 200 code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getRegionsInformation, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getRegionsInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRegions@3ddc6915]" started-at="2023-03-30T16:20:17 UTC" name="teardown" finished-at="2023-03-30T16:20:17 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getRegionsInformation status=SUCCESS method=GetRegions.getRegionsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRegions@3ddc6915] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetRegions -->
      <class name="com.gapi.testCases.GetLocations">
        <test-method signature="getLocationsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:43 UTC" name="getLocationsInformation" data-provider="testCasesData" finished-at="2023-03-30T16:19:43 UTC" duration-ms="577" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate if the Response JSON object has all the fields mentioned in the swagger( EX: id, CreateTimestanp,ModifiedTimestamp, Assetname ..etc, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getLocationsInformation, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&site=PHX015&type=room, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationsInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:43 UTC" name="teardown" finished-at="2023-03-30T16:19:43 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationsInformation status=SUCCESS method=GetLocations.getLocationsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:43 UTC" name="getLocationsInformation" data-provider="testCasesData" finished-at="2023-03-30T16:19:44 UTC" duration-ms="650" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Markets using account id &Region, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getLocationsInformation, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&site=PHX015&region=North America, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationsInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:44 UTC" name="teardown" finished-at="2023-03-30T16:19:44 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationsInformation status=SUCCESS method=GetLocations.getLocationsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:44 UTC" name="getLocationsInformation" data-provider="testCasesData" finished-at="2023-03-30T16:19:45 UTC" duration-ms="674" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify if API user is able to retrieve the location details with filters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getLocationsInformation, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationsInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:45 UTC" name="teardown" finished-at="2023-03-30T16:19:45 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationsInformation status=SUCCESS method=GetLocations.getLocationsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:45 UTC" name="getLocationsInformation" data-provider="testCasesData" finished-at="2023-03-30T16:19:45 UTC" duration-ms="481" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify if API user is able to retrieve the location details with filters Region & Country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getLocationsInformation, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&site=PHX015&country=United States&region=North America, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationsInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:45 UTC" name="teardown" finished-at="2023-03-30T16:19:45 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationsInformation status=SUCCESS method=GetLocations.getLocationsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:45 UTC" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-03-30T16:19:46 UTC" duration-ms="538" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify if API user is able to retrieve the location details with filters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dmMWaQAM&site=PHX015&type=room, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:46 UTC" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-03-30T16:19:46 UTC" duration-ms="490" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer using Valid account id and Invalid Site Code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dmMWaQAM&site=123, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:46 UTC" name="teardown" finished-at="2023-03-30T16:19:46 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetLocations.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:46 UTC" name="teardown" finished-at="2023-03-30T16:19:46 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetLocations.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:46 UTC" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-03-30T16:19:47 UTC" duration-ms="476" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer using Invalid account id and valid Site Code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=abc&site=PHX015&type=room , visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:47 UTC" name="teardown" finished-at="2023-03-30T16:19:47 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetLocations.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:47 UTC" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-03-30T16:19:47 UTC" duration-ms="485" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer using Valid account id &Site Code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, errorMessageType=, standardVisitorBadgeStr=, filters=site=IAD024&accountId=0012E00002dmMWaQAM, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:47 UTC" name="teardown" finished-at="2023-03-30T16:19:47 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetLocations.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:47 UTC" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-03-30T16:19:48 UTC" duration-ms="498" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer using account id,Site Code&Type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, errorMessageType=, standardVisitorBadgeStr=, filters=site=IAD024&accountId=0012E00002dmMWaQAM&type=datacenter, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d]" started-at="2023-03-30T16:19:48 UTC" name="teardown" finished-at="2023-03-30T16:19:48 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetLocations.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@27508c5d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetLocations -->
      <class name="com.gapi.testCases.GetCountries">
        <test-method signature="getCountriesInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCountries@6f6745d6]" started-at="2023-03-30T16:19:41 UTC" name="getCountriesInformation" data-provider="testCasesData" finished-at="2023-03-30T16:19:42 UTC" duration-ms="864" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate if the Response has Countries field in addition to the 200 code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCountriesInformation, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCountriesInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCountries@6f6745d6]" started-at="2023-03-30T16:19:42 UTC" name="teardown" finished-at="2023-03-30T16:19:42 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCountriesInformation status=SUCCESS method=GetCountries.getCountriesInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCountries@6f6745d6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCountriesInformationusingfilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCountries@6f6745d6]" started-at="2023-03-30T16:19:42 UTC" name="getCountriesInformationusingfilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:43 UTC" duration-ms="1225" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Locations for Customer - Countries using account id &Region, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCountriesInformationusingfilters, errorMessageType=, standardVisitorBadgeStr=, filters=?region=North America&accountId=0012E00002dmMWbQAM, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCountriesInformationusingfilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCountries@6f6745d6]" started-at="2023-03-30T16:19:43 UTC" name="teardown" finished-at="2023-03-30T16:19:43 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCountriesInformationusingfilters status=SUCCESS method=GetCountries.getCountriesInformationusingfilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCountries@6f6745d6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetCountries -->
      <class name="com.gapi.testCases.CreateShipmentsTicket">
        <test-method signature="AddAttachmentstoShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:14 UTC" name="AddAttachmentstoShipmentsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:16:15 UTC" duration-ms="600" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=SR- Submit Shipping & Receiving Request with Various file types/formats, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO8686265, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=title sample1, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=AddAttachmentstoShipmentsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddAttachmentstoShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:15 UTC" name="teardown" finished-at="2023-03-30T16:16:15 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddAttachmentstoShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.AddAttachmentstoShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="CreateShipmentsTicketeithInvalidNotificationRecipient(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:15 UTC" name="CreateShipmentsTicketeithInvalidNotificationRecipient" data-provider="testCasesData" finished-at="2023-03-30T16:16:15 UTC" duration-ms="278" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Submit a S&R tickets - with invalid Notification Recipient email format, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Payload 'notificationRecipients' is not an valid email address., methodName=CreateShipmentsTicketeithInvalidNotificationRecipient, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateShipmentsTicketeithInvalidNotificationRecipient -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:15 UTC" name="teardown" finished-at="2023-03-30T16:16:15 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateShipmentsTicketeithInvalidNotificationRecipient status=SUCCESS method=CreateShipmentsTicket.CreateShipmentsTicketeithInvalidNotificationRecipient(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="createShipmentsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:15 UTC" name="createShipmentsTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-03-30T16:16:31 UTC" duration-ms="15791" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Create shipments Ticket End To End Flow, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createShipmentsTicketAndVerifyEndToEndFlow, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.addCommentToTheRequestAndVerify(TestUtilities.java:369)
at com.gapi.testCases.CreateShipmentsTicket.createShipmentsTicketAndVerifyEndToEndFlow(CreateShipmentsTicket.java:83)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createShipmentsTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:31 UTC" name="teardown" finished-at="2023-03-30T16:16:31 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createShipmentsTicketAndVerifyEndToEndFlow status=SKIP method=CreateShipmentsTicket.createShipmentsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createShipmentsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:31 UTC" name="createShipmentsTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-03-30T16:16:46 UTC" duration-ms="15154" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Create shipments Ticket End To End Flow, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createShipmentsTicketAndVerifyEndToEndFlow, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.addCommentToTheRequestAndVerify(TestUtilities.java:369)
at com.gapi.testCases.CreateShipmentsTicket.createShipmentsTicketAndVerifyEndToEndFlow(CreateShipmentsTicket.java:83)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createShipmentsTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:46 UTC" name="teardown" finished-at="2023-03-30T16:16:46 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createShipmentsTicketAndVerifyEndToEndFlow status=FAILURE method=CreateShipmentsTicket.createShipmentsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="invalidEstimatedDeliveryDateFormatSHTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:46 UTC" name="invalidEstimatedDeliveryDateFormatSHTicket" data-provider="testCasesData" finished-at="2023-03-30T16:16:47 UTC" duration-ms="1264" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=SR- Submit  S&R tickets with invalid date format for Estimated delivery time, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1.0, firstName=, phone=, courier=USP, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=xyz, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=invalidEstimatedDeliveryDateFormatSHTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidEstimatedDeliveryDateFormatSHTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:47 UTC" name="teardown" finished-at="2023-03-30T16:16:47 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=invalidEstimatedDeliveryDateFormatSHTicket status=SUCCESS method=CreateShipmentsTicket.invalidEstimatedDeliveryDateFormatSHTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="postingAttachmentOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:47 UTC" name="postingAttachmentOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-03-30T16:16:48 UTC" duration-ms="1092" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=SR- Submit Shipping & Receiving Request with multiple Attachments  ( posting 1 attachment at a time), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO8686265, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType= Shipments Ticket, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=postingAttachmentOfAnExistingShippingReceivingTicket, errorMessageType=, standardVisitorBadgeStr=, filters=?filename=Sampleimage.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postingAttachmentOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:48 UTC" name="teardown" finished-at="2023-03-30T16:16:48 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=postingAttachmentOfAnExistingShippingReceivingTicket status=SUCCESS method=CreateShipmentsTicket.postingAttachmentOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateSHTicketForInvalidUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:48 UTC" name="verifyCreateSHTicketForInvalidUser" data-provider="testCasesData" finished-at="2023-03-30T16:16:49 UTC" duration-ms="490" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Shipments Ticket with Invalid user RBAC, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyCreateSHTicketForInvalidUser, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateSHTicketForInvalidUser -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:49 UTC" name="teardown" finished-at="2023-03-30T16:16:49 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateSHTicketForInvalidUser status=SUCCESS method=CreateShipmentsTicket.verifyCreateSHTicketForInvalidUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateSHTicketForWithLoadingBayRequired(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:49 UTC" name="verifyCreateSHTicketForWithLoadingBayRequired" data-provider="testCasesData" finished-at="2023-03-30T16:16:51 UTC" duration-ms="2312" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Submit  S&R tickets with Optional parameters - Loading Bay Required, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=true, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateSHTicketForWithLoadingBayRequired, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateSHTicketForWithLoadingBayRequired -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:51 UTC" name="teardown" finished-at="2023-03-30T16:16:51 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateSHTicketForWithLoadingBayRequired status=SUCCESS method=CreateShipmentsTicket.verifyCreateSHTicketForWithLoadingBayRequired(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:51 UTC" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:16:56 UTC" duration-ms="4349" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Shipments Ticket with both optional and Mandatory fields, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:56 UTC" name="teardown" finished-at="2023-03-30T16:16:56 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:16:56 UTC" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:17:00 UTC" duration-ms="4542" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Shipments Ticket With Mandatory Fields Only, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:00 UTC" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:17:05 UTC" duration-ms="4421" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Shipments Ticket with all mandatory fields and optional parameter - customer reference, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:00 UTC" name="teardown" finished-at="2023-03-30T16:17:00 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:05 UTC" name="teardown" finished-at="2023-03-30T16:17:05 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:05 UTC" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:17:09 UTC" duration-ms="4533" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Shipments Ticket with all mandatory fields and optional parameter - multiple notification receipents, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com,qatesting@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:09 UTC" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:17:14 UTC" duration-ms="4650" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Shipments Ticket with all mandatory fields and optional parameter - tracking Number, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com,qatesting@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:09 UTC" name="teardown" finished-at="2023-03-30T16:17:09 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:14 UTC" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:17:18 UTC" duration-ms="4458" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Shipments Ticket with all mandatory fields and optional parameter - package Count, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:14 UTC" name="teardown" finished-at="2023-03-30T16:17:14 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:18 UTC" name="teardown" finished-at="2023-03-30T16:17:18 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:18 UTC" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:17:19 UTC" duration-ms="271" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Shipments Ticket with Invalid Notification Recipient email format , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=ane_eer_email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Payload 'notificationRecipients' is not an valid email address., methodName=verifyCreateShipmentsTicket, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:19 UTC" name="teardown" finished-at="2023-03-30T16:17:19 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:19 UTC" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:17:23 UTC" duration-ms="4778" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Shipments Ticket with Optional parameters - isLoadingBayRequired, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:23 UTC" name="teardown" finished-at="2023-03-30T16:17:23 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:23 UTC" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:17:28 UTC" duration-ms="4635" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Shipments Ticket with Optional parameters - Estimated Delivery Date, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:28 UTC" name="teardown" finished-at="2023-03-30T16:17:28 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:28 UTC" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:17:33 UTC" duration-ms="4662" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Submit S&R tickets - enter an invalid Courier company   (DHL, FedEx, DPD, TNT, UPS, USPS, Other - are valid couriers), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DTDCTEST, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:33 UTC" name="teardown" finished-at="2023-03-30T16:17:33 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyMaxCharactersOfShipmentsParameters(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:33 UTC" name="verifyMaxCharactersOfShipmentsParameters" data-provider="testCasesData" finished-at="2023-03-30T16:17:33 UTC" duration-ms="377" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Max # of characters and data types for each mandatory and optional parameters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Not Found, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=404, ci=, readFlag=, errorMessage=, methodName=verifyMaxCharactersOfShipmentsParameters, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=DFW010, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyMaxCharactersOfShipmentsParameters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:33 UTC" name="teardown" finished-at="2023-03-30T16:17:33 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyMaxCharactersOfShipmentsParameters status=SUCCESS method=CreateShipmentsTicket.verifyMaxCharactersOfShipmentsParameters(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyRequestIdAndFileNameSHTicketForWithoutmandatoryfieldsRequired(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:33 UTC" name="verifyRequestIdAndFileNameSHTicketForWithoutmandatoryfieldsRequired" data-provider="testCasesData" finished-at="2023-03-30T16:17:33 UTC" duration-ms="266" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=SR Submit Remote hand without mandatory fields RequestID and filename, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=title sample1, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=verifyRequestIdAndFileNameSHTicketForWithoutmandatoryfieldsRequired, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRequestIdAndFileNameSHTicketForWithoutmandatoryfieldsRequired -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7]" started-at="2023-03-30T16:17:33 UTC" name="teardown" finished-at="2023-03-30T16:17:33 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyRequestIdAndFileNameSHTicketForWithoutmandatoryfieldsRequired status=SUCCESS method=CreateShipmentsTicket.verifyRequestIdAndFileNameSHTicketForWithoutmandatoryfieldsRequired(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreateShipmentsTicket -->
      <class name="com.gapi.testCases.CancelShipmentsTicket">
        <test-method signature="verifyCancelShipmentsTicketWithCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@4167d97b]" started-at="2023-03-30T16:27:52 UTC" name="verifyCancelShipmentsTicketWithCancelReason" data-provider="testCasesData" finished-at="2023-03-30T16:27:58 UTC" duration-ms="6081" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Cancel S&R Ticket in Status - New ( specifying ID - WO Number &cancel reason) (verify Cancel reason- "Duplicate request"), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=1.0, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=44996.0, firstName=, phone=, courier=test, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=abc, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=Duplicate request, email=, visitorFirstName=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCancelShipmentsTicketWithCancelReason, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelShipmentsTicketWithCancelReason -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@4167d97b]" started-at="2023-03-30T16:27:58 UTC" name="teardown" finished-at="2023-03-30T16:27:58 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelShipmentsTicketWithCancelReason status=SUCCESS method=CancelShipmentsTicket.verifyCancelShipmentsTicketWithCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCancelShipmentsTicketWithCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@4167d97b]" started-at="2023-03-30T16:27:58 UTC" name="verifyCancelShipmentsTicketWithCancelReason" data-provider="testCasesData" finished-at="2023-03-30T16:28:05 UTC" duration-ms="6258" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Cancel S&R Ticket in Status - New ( specifying ID - WO Number & cancel reason)    (verify Cancel reason-  Request entered in error), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=1.0, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=44996.0, firstName=, phone=, courier=test, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=abc, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=Request entered in error, email=, visitorFirstName=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCancelShipmentsTicketWithCancelReason, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelShipmentsTicketWithCancelReason -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@4167d97b]" started-at="2023-03-30T16:28:05 UTC" name="teardown" finished-at="2023-03-30T16:28:05 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelShipmentsTicketWithCancelReason status=SUCCESS method=CancelShipmentsTicket.verifyCancelShipmentsTicketWithCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCancelShipmentsTicketwithoutCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@4167d97b]" started-at="2023-03-30T16:28:05 UTC" name="verifyCancelShipmentsTicketwithoutCancelReason" data-provider="testCasesData" finished-at="2023-03-30T16:28:11 UTC" duration-ms="6141" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Cancel S&R Ticket in Status - New ( specifying ID - WO Number only WITHOUT cancel reason)    (verify Cancel reason defaults to Request No longer needed), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCancelShipmentsTicketwithoutCancelReason, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelShipmentsTicketwithoutCancelReason -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@4167d97b]" started-at="2023-03-30T16:28:11 UTC" name="teardown" finished-at="2023-03-30T16:28:11 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelShipmentsTicketwithoutCancelReason status=SUCCESS method=CancelShipmentsTicket.verifyCancelShipmentsTicketwithoutCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CancelShipmentsTicket -->
      <class name="com.gapi.testCases.EditRemoteHandsTicket">
        <test-method signature="verifyEditCustomerReferenceOfAnExistingRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditRemoteHandsTicket@127a7a2e]" started-at="2023-03-30T16:24:42 UTC" name="verifyEditCustomerReferenceOfAnExistingRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:24:48 UTC" duration-ms="5502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Edit the CustomerReference of an Existing Remote Hands Ticket in New Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditCustomerReferenceOfAnExistingRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditCustomerReferenceOfAnExistingRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditRemoteHandsTicket@127a7a2e]" started-at="2023-03-30T16:24:48 UTC" name="teardown" finished-at="2023-03-30T16:24:48 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditCustomerReferenceOfAnExistingRemoteHandsTicket status=SUCCESS method=EditRemoteHandsTicket.verifyEditCustomerReferenceOfAnExistingRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditRemoteHandsTicket@127a7a2e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditNotificationRecipientsOfAnExistingRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditRemoteHandsTicket@127a7a2e]" started-at="2023-03-30T16:24:48 UTC" name="verifyEditNotificationRecipientsOfAnExistingRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-03-30T16:24:53 UTC" duration-ms="5244" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Edit the Notification Recipients of an Existing Remote Hands Ticket in New Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditNotificationRecipientsOfAnExistingRemoteHandsTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditNotificationRecipientsOfAnExistingRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditRemoteHandsTicket@127a7a2e]" started-at="2023-03-30T16:24:53 UTC" name="teardown" finished-at="2023-03-30T16:24:53 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditNotificationRecipientsOfAnExistingRemoteHandsTicket status=SUCCESS method=EditRemoteHandsTicket.verifyEditNotificationRecipientsOfAnExistingRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditRemoteHandsTicket@127a7a2e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.EditRemoteHandsTicket -->
      <class name="com.gapi.testCases.GetRolesDetails">
        <test-method signature="getPrivilegesinfoByInvalidRoleId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:43 UTC" name="getPrivilegesinfoByInvalidRoleId" data-provider="testCasesData" finished-at="2023-03-30T16:25:44 UTC" duration-ms="987" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve the Privileges info by Invalid RoleID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=getPrivilegesinfoByInvalidRoleId, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPrivilegesinfoByInvalidRoleId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:44 UTC" name="teardown" finished-at="2023-03-30T16:25:44 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPrivilegesinfoByInvalidRoleId status=SUCCESS method=GetRolesDetails.getPrivilegesinfoByInvalidRoleId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getPrivilegesinfoByValidRoleId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:44 UTC" name="getPrivilegesinfoByValidRoleId" data-provider="testCasesData" finished-at="2023-03-30T16:25:44 UTC" duration-ms="891" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve the Privileges info by Valid RoleID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getPrivilegesinfoByValidRoleId, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPrivilegesinfoByValidRoleId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:44 UTC" name="teardown" finished-at="2023-03-30T16:25:44 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPrivilegesinfoByValidRoleId status=SUCCESS method=GetRolesDetails.getPrivilegesinfoByValidRoleId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getRolesinfoByInvalidRoleId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:44 UTC" name="getRolesinfoByInvalidRoleId" data-provider="testCasesData" finished-at="2023-03-30T16:25:45 UTC" duration-ms="803" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve a Roles details by - Invalid Role ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=getRolesinfoByInvalidRoleId, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getRolesinfoByInvalidRoleId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:45 UTC" name="teardown" finished-at="2023-03-30T16:25:45 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getRolesinfoByInvalidRoleId status=SUCCESS method=GetRolesDetails.getRolesinfoByInvalidRoleId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getRolesinfoByValidRoleId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:45 UTC" name="getRolesinfoByValidRoleId" data-provider="testCasesData" finished-at="2023-03-30T16:25:46 UTC" duration-ms="1014" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve a Roles details by - Valid Role ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getRolesinfoByValidRoleId, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getRolesinfoByValidRoleId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:46 UTC" name="teardown" finished-at="2023-03-30T16:25:46 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getRolesinfoByValidRoleId status=SUCCESS method=GetRolesDetails.getRolesinfoByValidRoleId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:46 UTC" name="getallRolesinfo" data-provider="testCasesData" finished-at="2023-03-30T16:25:47 UTC" duration-ms="473" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Roles info, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getallRolesinfo, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:47 UTC" name="teardown" finished-at="2023-03-30T16:25:47 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfo status=SUCCESS method=GetRolesDetails.getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:47 UTC" name="getallRolesinfo" data-provider="testCasesData" finished-at="2023-03-30T16:25:47 UTC" duration-ms="466" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Roles info - By Page, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getallRolesinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:47 UTC" name="teardown" finished-at="2023-03-30T16:25:47 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfo status=SUCCESS method=GetRolesDetails.getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:47 UTC" name="getallRolesinfo" data-provider="testCasesData" finished-at="2023-03-30T16:25:48 UTC" duration-ms="428" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Roles info - By Size, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getallRolesinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?size=20, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:48 UTC" name="teardown" finished-at="2023-03-30T16:25:48 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfo status=SUCCESS method=GetRolesDetails.getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:48 UTC" name="getallRolesinfo" data-provider="testCasesData" finished-at="2023-03-30T16:25:48 UTC" duration-ms="446" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Roles info - By Page&Size, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getallRolesinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?page=0&size=20, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:48 UTC" name="teardown" finished-at="2023-03-30T16:25:48 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfo status=SUCCESS method=GetRolesDetails.getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:48 UTC" name="getallRolesinfo" data-provider="testCasesData" finished-at="2023-03-30T16:25:48 UTC" duration-ms="424" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Roles info - By Sort, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getallRolesinfo, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=true, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654]" started-at="2023-03-30T16:25:48 UTC" name="teardown" finished-at="2023-03-30T16:25:48 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfo status=SUCCESS method=GetRolesDetails.getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@16aa8654] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetRolesDetails -->
      <class name="com.gapi.testCases.GetAllAssets">
        <test-method signature="getAllAssetsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:19:53 UTC" name="getAllAssetsInformation" data-provider="testCasesData" finished-at="2023-03-30T16:19:54 UTC" duration-ms="673" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list by Customer, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformation, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:19:54 UTC" name="teardown" finished-at="2023-03-30T16:19:54 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformation status=SUCCESS method=GetAllAssets.getAllAssetsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:19:54 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:54 UTC" duration-ms="618" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using sitecode,country&page, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?page=0&country=Hong Kong&sitecode=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:19:54 UTC" name="teardown" finished-at="2023-03-30T16:19:54 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:19:54 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:55 UTC" duration-ms="791" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using Site code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?sitecode=OAK010, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:19:55 UTC" name="teardown" finished-at="2023-03-30T16:19:55 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:19:55 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:56 UTC" duration-ms="768" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using country&size, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?country=United States&size=1, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:19:56 UTC" name="teardown" finished-at="2023-03-30T16:19:56 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:19:56 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:57 UTC" duration-ms="902" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using sitecode,country,mareket&page, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?country=United States&page=0&market=Dallas&sitecode=ORD011, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:19:57 UTC" name="teardown" finished-at="2023-03-30T16:19:57 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:19:57 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:58 UTC" duration-ms="1028" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using region,country,campus&sort, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?country=United States&sort=sitecode,ASC&region=North America&campus=Y, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:19:58 UTC" name="teardown" finished-at="2023-03-30T16:19:58 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:19:58 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:58 UTC" duration-ms="722" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using sitecode,market,country,city,campus,region&size, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?country=United States&size=1&market=Dallas&sitecode=ORD011&region=North America&campus=Y&city=Atlanta, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:19:58 UTC" name="teardown" finished-at="2023-03-30T16:19:58 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:19:58 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:59 UTC" duration-ms="740" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using Sitecode,market,Coutntry&Region, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?country=United States&market=Dallas&sitecode=ORD011&region=North America, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:19:59 UTC" name="teardown" finished-at="2023-03-30T16:19:59 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:19:59 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:00 UTC" duration-ms="663" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using site code,Campus & City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?sitecode=ORD011&campus=Y&city=Atlanta, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:00 UTC" name="teardown" finished-at="2023-03-30T16:20:00 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:00 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:00 UTC" duration-ms="667" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using Page, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:00 UTC" name="teardown" finished-at="2023-03-30T16:20:00 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:00 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:01 UTC" duration-ms="731" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using Sort, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=type,DESC, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:01 UTC" name="teardown" finished-at="2023-03-30T16:20:01 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:01 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:02 UTC" duration-ms="659" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using Size, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?size=100, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:02 UTC" name="teardown" finished-at="2023-03-30T16:20:02 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:02 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:03 UTC" duration-ms="673" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using Region, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?region=North America, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:03 UTC" name="teardown" finished-at="2023-03-30T16:20:03 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:03 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:03 UTC" duration-ms="689" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using Market, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?market=Dallas, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:03 UTC" name="teardown" finished-at="2023-03-30T16:20:03 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:03 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:04 UTC" duration-ms="660" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using campus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?campus=N, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:04 UTC" name="teardown" finished-at="2023-03-30T16:20:04 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:04 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:05 UTC" duration-ms="601" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?city=Atlanta, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:05 UTC" name="teardown" finished-at="2023-03-30T16:20:05 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:05 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:05 UTC" duration-ms="896" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using Invalid Campus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Invalid search parameter check campus, city, market, country, region, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=INVALID_SEARCH_PARAMETER, standardVisitorBadgeStr=, filters=?campus=abc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:05 UTC" name="teardown" finished-at="2023-03-30T16:20:05 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:05 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:06 UTC" duration-ms="694" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using Invalid sitecode& valid page, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?page=0&sitecode=ORD0110, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:06 UTC" name="teardown" finished-at="2023-03-30T16:20:06 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:06 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:07 UTC" duration-ms="751" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using Invalid Sort value, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Internal Server Error, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=500, ci=, readFlag=, errorMessage=There was an unexpected system error., methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=SYSTEM, standardVisitorBadgeStr=, filters=?sort=typew,DESC, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:07 UTC" name="teardown" finished-at="2023-03-30T16:20:07 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:07 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:08 UTC" duration-ms="998" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using Invalid country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Invalid search parameter check campus, city, market, country, region, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=INVALID_SEARCH_PARAMETER, standardVisitorBadgeStr=, filters=?country=DLR, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:08 UTC" name="teardown" finished-at="2023-03-30T16:20:08 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:08 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:09 UTC" duration-ms="783" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using Invalid sitecode, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?sitecode=ORD0110, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:09 UTC" name="teardown" finished-at="2023-03-30T16:20:09 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:09 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:09 UTC" duration-ms="452" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using Invalid Page value(More than available page value), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Bad request was submitted., methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=BAD_REQUEST, standardVisitorBadgeStr=, filters=?page=a, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:09 UTC" name="teardown" finished-at="2023-03-30T16:20:09 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:09 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:10 UTC" duration-ms="548" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using Invalid Size(Non-Integer value), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Bad request was submitted., methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=BAD_REQUEST, standardVisitorBadgeStr=, filters=?size=xyz, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:10 UTC" name="teardown" finished-at="2023-03-30T16:20:10 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:10 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:10 UTC" duration-ms="436" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using valid Sort&invalid Size, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Bad request was submitted., methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=BAD_REQUEST, standardVisitorBadgeStr=, filters=?size=PHX&sort=sitecode,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:10 UTC" name="teardown" finished-at="2023-03-30T16:20:10 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:10 UTC" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:20:11 UTC" duration-ms="639" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Asset list of Customer using sitecode,country,city,campus,region,market,Size,Sort&page, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?country=United States&market=Dallas&region=North America&city=Atlanta&page=0&size=1&sitecode=ORD011&campus=Y&sort=type,DESC, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:11 UTC" name="teardown" finished-at="2023-03-30T16:20:11 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="vaidateTheCustomerAssetsUsingAccountIdAndAssetID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:11 UTC" name="vaidateTheCustomerAssetsUsingAccountIdAndAssetID" data-provider="testCasesData" finished-at="2023-03-30T16:20:11 UTC" duration-ms="741" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Vaidate the customer assets using  accountId & Asset ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=vaidateTheCustomerAssetsUsingAccountIdAndAssetID, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&parentId=8121750f13def200a501b7a66144b0dc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- vaidateTheCustomerAssetsUsingAccountIdAndAssetID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:11 UTC" name="teardown" finished-at="2023-03-30T16:20:11 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=vaidateTheCustomerAssetsUsingAccountIdAndAssetID status=SUCCESS method=GetAllAssets.vaidateTheCustomerAssetsUsingAccountIdAndAssetID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="vaidateTheCustomerAssetsUsingInValidAccountIdAndInValidAssetID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:11 UTC" name="vaidateTheCustomerAssetsUsingInValidAccountIdAndInValidAssetID" data-provider="testCasesData" finished-at="2023-03-30T16:20:12 UTC" duration-ms="547" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Vaidate the customer assets using Invalid accountId & Valid AssetId, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=vaidateTheCustomerAssetsUsingInValidAccountIdAndInValidAssetID, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&parentId=8121750f13def200a501b7a66144b0dc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- vaidateTheCustomerAssetsUsingInValidAccountIdAndInValidAssetID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:12 UTC" name="teardown" finished-at="2023-03-30T16:20:12 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=vaidateTheCustomerAssetsUsingInValidAccountIdAndInValidAssetID status=SUCCESS method=GetAllAssets.vaidateTheCustomerAssetsUsingInValidAccountIdAndInValidAssetID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="vaidateTheCustomerAssetsUsingValidAccountIdAndParentID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:12 UTC" name="vaidateTheCustomerAssetsUsingValidAccountIdAndParentID" data-provider="testCasesData" finished-at="2023-03-30T16:20:15 UTC" duration-ms="2558" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Vaidate the customer assets using Valid accountId & ParentID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=vaidateTheCustomerAssetsUsingValidAccountIdAndParentID, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&parentId=8121750f13def200a501b7a66144b0dc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- vaidateTheCustomerAssetsUsingValidAccountIdAndParentID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:15 UTC" name="teardown" finished-at="2023-03-30T16:20:15 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=vaidateTheCustomerAssetsUsingValidAccountIdAndParentID status=SUCCESS method=GetAllAssets.vaidateTheCustomerAssetsUsingValidAccountIdAndParentID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyRetrievalofAssetNamesUsingAssetID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:15 UTC" name="verifyRetrievalofAssetNamesUsingAssetID" data-provider="testCasesData" finished-at="2023-03-30T16:20:16 UTC" duration-ms="1114" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve the asset names using the  Valid asset ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyRetrievalofAssetNamesUsingAssetID, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&parentId=8121750f13def200a501b7a66144b0dc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRetrievalofAssetNamesUsingAssetID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:16 UTC" name="teardown" finished-at="2023-03-30T16:20:16 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyRetrievalofAssetNamesUsingAssetID status=SUCCESS method=GetAllAssets.verifyRetrievalofAssetNamesUsingAssetID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyRetrievalofAssetNamesUsingInvalidAssetID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:16 UTC" name="verifyRetrievalofAssetNamesUsingInvalidAssetID" data-provider="testCasesData" finished-at="2023-03-30T16:20:16 UTC" duration-ms="423" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve the asset names using the Invalid asset ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyRetrievalofAssetNamesUsingInvalidAssetID, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRetrievalofAssetNamesUsingInvalidAssetID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5]" started-at="2023-03-30T16:20:16 UTC" name="teardown" finished-at="2023-03-30T16:20:16 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyRetrievalofAssetNamesUsingInvalidAssetID status=SUCCESS method=GetAllAssets.verifyRetrievalofAssetNamesUsingInvalidAssetID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetAllAssets -->
      <class name="com.gapi.testCases.GetOSPDetails">
        <test-method signature="getOSPDetailsInfo()[pri:0, instance:com.gapi.testCases.GetOSPDetails@a307a8c]" started-at="2023-03-30T16:21:57 UTC" name="getOSPDetailsInfo" finished-at="2023-03-30T16:22:02 UTC" duration-ms="5134" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getOSPDetailsInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetOSPDetails@a307a8c]" started-at="2023-03-30T16:22:02 UTC" name="teardown" finished-at="2023-03-30T16:22:02 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getOSPDetailsInfo status=SUCCESS method=GetOSPDetails.getOSPDetailsInfo()[pri:0, instance:com.gapi.testCases.GetOSPDetails@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getOSPDetailsInfoWithInvalidGlobalUltimate()[pri:0, instance:com.gapi.testCases.GetOSPDetails@a307a8c]" started-at="2023-03-30T16:22:02 UTC" name="getOSPDetailsInfoWithInvalidGlobalUltimate" finished-at="2023-03-30T16:22:02 UTC" duration-ms="402" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getOSPDetailsInfoWithInvalidGlobalUltimate -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetOSPDetails@a307a8c]" started-at="2023-03-30T16:22:02 UTC" name="teardown" finished-at="2023-03-30T16:22:02 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getOSPDetailsInfoWithInvalidGlobalUltimate status=SUCCESS method=GetOSPDetails.getOSPDetailsInfoWithInvalidGlobalUltimate()[pri:0, instance:com.gapi.testCases.GetOSPDetails@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getOSPDetailsInfoWithInvalidToken()[pri:0, instance:com.gapi.testCases.GetOSPDetails@a307a8c]" started-at="2023-03-30T16:22:02 UTC" name="getOSPDetailsInfoWithInvalidToken" finished-at="2023-03-30T16:22:03 UTC" duration-ms="207" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getOSPDetailsInfoWithInvalidToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetOSPDetails@a307a8c]" started-at="2023-03-30T16:22:03 UTC" name="teardown" finished-at="2023-03-30T16:22:03 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getOSPDetailsInfoWithInvalidToken status=SUCCESS method=GetOSPDetails.getOSPDetailsInfoWithInvalidToken()[pri:0, instance:com.gapi.testCases.GetOSPDetails@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetOSPDetails -->
      <class name="com.gapi.testCases.EditShippingReceivingTicket">
        <test-method signature="editTheContactsOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:23:34 UTC" name="editTheContactsOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-03-30T16:23:40 UTC" duration-ms="5345" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=SR- Edit the Contacts of an Existing SR Ticket -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=USP, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=xyz, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=editTheContactsOfAnExistingShippingReceivingTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- editTheContactsOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:23:40 UTC" name="teardown" finished-at="2023-03-30T16:23:40 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=editTheContactsOfAnExistingShippingReceivingTicket status=SUCCESS method=EditShippingReceivingTicket.editTheContactsOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditCourierOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:23:40 UTC" name="verifyEditCourierOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-03-30T16:23:45 UTC" duration-ms="5424" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Edit the Courier of an Existing Shipping Receiving Ticket Ticket  -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditCourierOfAnExistingShippingReceivingTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditCourierOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:23:45 UTC" name="teardown" finished-at="2023-03-30T16:23:45 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditCourierOfAnExistingShippingReceivingTicket status=SUCCESS method=EditShippingReceivingTicket.verifyEditCourierOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditDescriptionOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:23:45 UTC" name="verifyEditDescriptionOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-03-30T16:23:50 UTC" duration-ms="4841" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Edit the Description of an Existing SR Ticket -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditDescriptionOfAnExistingShippingReceivingTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditDescriptionOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:23:50 UTC" name="teardown" finished-at="2023-03-30T16:23:50 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditDescriptionOfAnExistingShippingReceivingTicket status=SUCCESS method=EditShippingReceivingTicket.verifyEditDescriptionOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditEstimatedDeliveryDateOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:23:50 UTC" name="verifyEditEstimatedDeliveryDateOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-03-30T16:23:55 UTC" duration-ms="4928" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Edit the Estimated Delivery Date of an Existing SR Ticket -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditEstimatedDeliveryDateOfAnExistingShippingReceivingTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditEstimatedDeliveryDateOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:23:55 UTC" name="teardown" finished-at="2023-03-30T16:23:55 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditEstimatedDeliveryDateOfAnExistingShippingReceivingTicket status=SUCCESS method=EditShippingReceivingTicket.verifyEditEstimatedDeliveryDateOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditLoadingBayofanExistingSRTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:23:55 UTC" name="verifyEditLoadingBayofanExistingSRTicket" data-provider="testCasesData" finished-at="2023-03-30T16:24:00 UTC" duration-ms="5137" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=SR- Edit the Loading Bay of an Existing SR Ticket  -Status -   New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1.0, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=true, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyEditLoadingBayofanExistingSRTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditLoadingBayofanExistingSRTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:24:00 UTC" name="teardown" finished-at="2023-03-30T16:24:00 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditLoadingBayofanExistingSRTicket status=SUCCESS method=EditShippingReceivingTicket.verifyEditLoadingBayofanExistingSRTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:24:00 UTC" name="verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-03-30T16:24:05 UTC" duration-ms="4943" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Edit the Number of Packages of an Existing SR Ticket -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:24:05 UTC" name="teardown" finished-at="2023-03-30T16:24:05 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket status=SUCCESS method=EditShippingReceivingTicket.verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditReferenceNumberOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:24:05 UTC" name="verifyEditReferenceNumberOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-03-30T16:24:10 UTC" duration-ms="5099" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Edit the Reference Number of an Existing SR Ticket -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditReferenceNumberOfAnExistingShippingReceivingTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditReferenceNumberOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:24:10 UTC" name="teardown" finished-at="2023-03-30T16:24:10 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditReferenceNumberOfAnExistingShippingReceivingTicket status=SUCCESS method=EditShippingReceivingTicket.verifyEditReferenceNumberOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditTitleOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:24:10 UTC" name="verifyEditTitleOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-03-30T16:24:15 UTC" duration-ms="4955" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Edit theTitle of an Existing SR Ticket -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditTitleOfAnExistingShippingReceivingTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditTitleOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:24:15 UTC" name="teardown" finished-at="2023-03-30T16:24:15 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditTitleOfAnExistingShippingReceivingTicket status=SUCCESS method=EditShippingReceivingTicket.verifyEditTitleOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditTrackingNumberOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:24:15 UTC" name="verifyEditTrackingNumberOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-03-30T16:24:20 UTC" duration-ms="5246" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Edit the Tracking Number of an Existing  Shipping Receiving Ticket  -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditTrackingNumberOfAnExistingShippingReceivingTicket, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditTrackingNumberOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9]" started-at="2023-03-30T16:24:20 UTC" name="teardown" finished-at="2023-03-30T16:24:20 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditTrackingNumberOfAnExistingShippingReceivingTicket status=SUCCESS method=EditShippingReceivingTicket.verifyEditTrackingNumberOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@4b34fff9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.EditShippingReceivingTicket -->
      <class name="com.gapi.testCases.ModifyFAVisitorAccess">
        <test-method signature="verifyModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@421e361]" started-at="2023-03-30T16:22:25 UTC" name="verifyModifyVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-03-30T16:22:29 UTC" duration-ms="4492" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Modify visitor access request with valid site and location, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyModifyVisitorAccessRequest, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyModifyVisitorAccessRequest -->
        <test-method signature="verifyModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@421e361]" started-at="2023-03-30T16:22:29 UTC" name="verifyModifyVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-03-30T16:22:29 UTC" duration-ms="298" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Modify visitor access request with Invalid site and location, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Not Found, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=404, ci=, readFlag=, errorMessage=, methodName=verifyModifyVisitorAccessRequest, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX116, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyModifyVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@421e361]" started-at="2023-03-30T16:22:29 UTC" name="teardown" finished-at="2023-03-30T16:22:29 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyModifyVisitorAccessRequest status=SUCCESS method=ModifyFAVisitorAccess.verifyModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@421e361]" started-at="2023-03-30T16:22:29 UTC" name="teardown" finished-at="2023-03-30T16:22:29 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyModifyVisitorAccessRequest status=SUCCESS method=ModifyFAVisitorAccess.verifyModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.ModifyFAVisitorAccess -->
      <class name="com.gapi.testCases.GetCampus">
        <test-method signature="getCampusInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:26 UTC" name="getCampusInformation" data-provider="testCasesData" finished-at="2023-03-30T16:19:27 UTC" duration-ms="847" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate if the Response has campus field in addition to the 200 code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformation, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:27 UTC" name="teardown" finished-at="2023-03-30T16:19:27 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformation status=SUCCESS method=GetCampus.getCampusInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:27 UTC" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:27 UTC" duration-ms="698" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Campuses using account id , Market&City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&market=Hong Kong&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:27 UTC" name="teardown" finished-at="2023-03-30T16:19:27 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:27 UTC" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:28 UTC" duration-ms="673" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Campuses using account id & Market , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&market=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:28 UTC" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:29 UTC" duration-ms="641" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Campuses using account id  and City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:28 UTC" name="teardown" finished-at="2023-03-30T16:19:28 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:29 UTC" name="teardown" finished-at="2023-03-30T16:19:29 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:29 UTC" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:29 UTC" duration-ms="693" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Campuses using account id , Country&City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&country=Hong Kong&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:29 UTC" name="teardown" finished-at="2023-03-30T16:19:29 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:29 UTC" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:30 UTC" duration-ms="705" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Campuses using account id , Market,Country &City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&country=Hong Kong&market=Hong Kong&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:30 UTC" name="teardown" finished-at="2023-03-30T16:19:30 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:30 UTC" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:31 UTC" duration-ms="702" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Campuses using account id ,Country &Market , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&country=Hong Kong&market=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:31 UTC" name="teardown" finished-at="2023-03-30T16:19:31 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:31 UTC" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:31 UTC" duration-ms="630" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Campuses using account id , Region,Country,Market &City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&country=Hong Kong&market=Hong Kong&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:31 UTC" name="teardown" finished-at="2023-03-30T16:19:31 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:31 UTC" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:32 UTC" duration-ms="672" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Campuses using account id , Region,Country,Market , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&country=Hong Kong&market=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:32 UTC" name="teardown" finished-at="2023-03-30T16:19:32 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:32 UTC" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:33 UTC" duration-ms="629" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Campuses using account id , Region&City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:33 UTC" name="teardown" finished-at="2023-03-30T16:19:33 UTC" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:33 UTC" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:33 UTC" duration-ms="660" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Campuses using account id , Country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&country=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:33 UTC" name="teardown" finished-at="2023-03-30T16:19:33 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:33 UTC" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:34 UTC" duration-ms="667" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Campuses using account id , Region&Market, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&market=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:34 UTC" name="teardown" finished-at="2023-03-30T16:19:34 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:34 UTC" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:35 UTC" duration-ms="671" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Campuses using account id ,Region&Countrycode, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&country=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:35 UTC" name="teardown" finished-at="2023-03-30T16:19:35 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:35 UTC" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-03-30T16:19:35 UTC" duration-ms="669" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Campuses using account id , Region, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3]" started-at="2023-03-30T16:19:35 UTC" name="teardown" finished-at="2023-03-30T16:19:35 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@44a59da3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetCampus -->
      <class name="com.gapi.testCases.TerminateVisitorAccessRequest">
        <test-method signature="terminateVisitorAccessRequestWithIncorrectEmail(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@6c61a903]" started-at="2023-03-30T16:22:16 UTC" name="terminateVisitorAccessRequestWithIncorrectEmail" data-provider="testCasesData" finished-at="2023-03-30T16:22:16 UTC" duration-ms="277" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=FA-Terminate  Visitor Access Request - With incorrect Email - Validate error message, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=Arul, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=terminateVisitorAccessRequestWithIncorrectEmail, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=Test@, legalEntityKey=, visitorLastName=Prakash, PermissionGroupIDForprivileges=, site=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- terminateVisitorAccessRequestWithIncorrectEmail -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@6c61a903]" started-at="2023-03-30T16:22:16 UTC" name="teardown" finished-at="2023-03-30T16:22:16 UTC" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=terminateVisitorAccessRequestWithIncorrectEmail status=SUCCESS method=TerminateVisitorAccessRequest.terminateVisitorAccessRequestWithIncorrectEmail(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@6c61a903] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyTerminateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@6c61a903]" started-at="2023-03-30T16:22:16 UTC" name="verifyTerminateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-03-30T16:22:21 UTC" duration-ms="4161" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate Visitor Access Ticket Terminate, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyTerminateVisitorAccessRequest, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTerminateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@6c61a903]" started-at="2023-03-30T16:22:21 UTC" name="teardown" finished-at="2023-03-30T16:22:21 UTC" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTerminateVisitorAccessRequest status=SUCCESS method=TerminateVisitorAccessRequest.verifyTerminateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@6c61a903] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.TerminateVisitorAccessRequest -->
    </test> <!-- functional test -->
  </suite> <!-- gapi -->
</testng-results>
